I"z<<p>I recently acquired a car for recreational purposes since I had saved up a decent amount of money and didn’t feel like investing it. I purchased a BRZ because they are built in conjunction with Toyota and this should theoretically imply that they are relatively reliable and I won’t need to worry about the mechanical aspects of the vehicle. Furthermore, the BRZ’s interior is driver-centered while maintaining a relatively simple geometry that should facilitate the design of custom dash components to fit my upgraded electronics.</p>

<p>This project began as a way to disguise speed enforcement countermeasures within the car’s UI seeing as radar/lidar countermeasures are illegal in Ontario. As such, I figured that the best way to hide illegal features would be to program the UI myself. Seeing as the current head unit is only capable of playing back bluetooth audio, it’s very unlikely that anything I do will result in less overall functionality so there really is nothing to lose here.</p>

<p>A lot of work has gone into the project so I have split up this post to include a variety of sub-pages detailing individual subsystems in greater detail. This page serves to provide a general overview of the project and a set of links to sub-pages is included below:</p>
<ul>
  <li><a href="/brz-head-unit">Head Unit</a></li>
  <li><a href="/brz-user-interface">User Interface (Software)</a></li>
  <li><a href="/brz-steering-wheel">Steering Wheel</a></li>
</ul>

<h1 id="idea">Idea</h1>

<h2 id="ui-enhancements">UI Enhancements</h2>

<p><img src="/assets/img/brz/planned_display_layout.jpg" alt="Picture of plan" style="float: right; width:50%; height:80%; margin-left: 10px;" /></p>

<p>The plan is to replace the head unit of the BRZ with a <a href="https://www.aliexpress.com/item/1005003546521274.html">12.3” touch-screen</a>, replace the small button cluster on the center console with a <a href="https://www.aliexpress.com/item/4000393713339.html">7” touch screen</a>, and convert the analog gauge cluster to a display. The 12.3” display will be used for most vehicle functionality such as navigation and media whereas the 7” display will provide diagnostic information about the vehicle as well as any subsystems I add.</p>

<p>The car will have an LTE modem in it to provide WiFi connectivity for passengers and allow its internal computers to access Google Maps, media streaming services, and other resources such as the Waze database to protect against police encounters. Finally, I hope to add cameras all around the car and experiment with computer vision though, aside from collision warnings and enhanced cruise control I’m not sure what I’ll be able to code. The cameras will however provide a 360-degree dash cam and I will be able to use them for a Tesla-like sentry mode when the car is locked. Furthermore, it may be interesting to experiment with augmented reality headsets in the future to provide the driver with enhanced situational awareness but this is not in the works as of this writing.</p>

<h2 id="speed-enforcement-countermeasures">Speed Enforcement Countermeasures</h2>

<p>I’m hoping to, at the very least, add passive sensors for radar/lidar and aircraft but I may not be able to add active countermeasures such as radar/lidar jamming. Based on some brief research, there is a significant risk that a radar/lidar device would detect my jamming attempts seeing as many of them have jamming detection built in. Proper commercial jammers are designed to identify the specific make/model of a lidar gun and behave accordingly however they are rather cost-prohibitive so I may not be able to reasonably source a commercial system.</p>

<p>Aircraft countermeasures are more reasonably achievable since aircraft speed detection works using lines painted on the pavement at a known distance interval such that an aircraft flying above can time a vehicle crossing a set of these lines. My plan for countering this is to use a front facing camera on the car to pick up the lines at which point an onboard computer will use a software defined radio to look for any aircraft transponders within a certain radius of the vehicle. Should there be an aircraft nearby, the onboard computer will begin calling out speeds for the user to match in hopes that the average speed across the two lines does not exceed the posted limit.</p>

<p>An even more complex countermeasure I’m hoping to integrate is cellular sniffing where a computer would once again use a software defined radio to look for nearby cellular devices and fingerprint them to single out the specific make and model of cellular modem present in a Ford Interceptor. I’m unsure if this is even theoretically possible since newer cellular devices may encrypt everything including metadata but I intend to research this in depth.</p>

<p>In addition to passive countermeasures and radar/lidar jammers, the vehicle will hopefully have cellular and VHF/UHF jammers. The purpose of these is to prevent a Ford Interceptor’s cellular modem and radio from working when in close proximity to the BRZ meaning that the officer will <em>hopefully</em> be unable to run driver’s licenses or issue tickets.</p>

<h1 id="build">Build</h1>

<h2 id="software">Software</h2>

<p>I initially intended to build a custom image of Android Automotive for the BRZ and develop mobile applications that would mostly run as background services and overlay themselves on top of Android to display relevant information. Unfortunately this turned out to be a rather lucrative task and as of this writing I have elected to build a simple Android application running on a mobile image. The advantages of Android Automotive are as follows:</p>
<ul>
  <li>Better navigation with fully functional Google Maps (Android applications cannot have integrated navigation activities and can only display 2D maps as far as I am aware)</li>
  <li>Better media controls with proper Bluetooth integration (the Android Mobile OS cannot be used as a A2DP sink without modifying the source code)</li>
  <li>Better boot times</li>
</ul>

<p>Overall, I did not feel these advantages were enough to justify the increased complexity of building a custom Android Automotive image especially considering how many custom UI screens and functions I intend to incorporate as well as my lack of affinity for hardware-level programming.</p>

<p>The purpose of rebuilding the vehicle’s UI is not only to provide a seamless means of interacting with the additional functionality but also to fully hide any illegal functions on demand. As such, a ‘legal mode’ will be integrated in the software which will be activated on boot and will hide all illegal functionality from the vehicle’s UI. The driver can disable legal mode using an arbitrary set of seemingly random keystrokes using buttons throughout the car’s interior which will be intricate such that they cannot be haphazardly entered.</p>

<h2 id="hardware">Hardware</h2>

<h3 id="computers">Computers</h3>

<p>The car will contain a multitude of computers listed below alongside their purpose:</p>
<ul>
  <li>Head Unit/Center Console (Khadas VIM4) –&gt; Mostly displays data and video feeds, very little logic goes on here</li>
  <li>Diagnostic computer (RPi Zero) –&gt; runs diagnostic display in center console and interacts with the CANBUS using the last Arduino from the list below (CANBUS Controller).</li>
  <li>CANBUS server (Arduino) –&gt; Acts as interface between ethernet network and vehicle’s CANBUS</li>
  <li>Gauge cluster computer (RPi 4) –&gt; Listens to CANBUS and ethernet network to display data, will potentially run <a href="https://www.automotivelinux.org/">Automotive Grade Linux</a></li>
  <li>Safety computer (nVidia Jetson NX?) –&gt; Uses CV algorithms with vehicle cameras and exports HDMI feeds of cameras for head unit. The Khadas VIM4 has an HDMI input which can be used to display the HDMI output of the Jetson. This computer will be omitted in the first iteration of this build due to the chip shortage and the cameras will be connected directly to the Khadas VIM4.</li>
</ul>

<p>Most of the hardware modifications are executed by Arduinos integrated throughout the vehicle that share its CANBUS. The list of integrated Arduinos as well as the model used is as follows:</p>
<ul>
  <li>Headlight manager (MEGA_EMBED) –&gt; Used to control lights on front half of the vehicle. Controls relays for the factory lights, voltage dividers to detect their state, and addressable LEDs integrated throughout the front end.</li>
  <li>Rear light manager (MEGA_EMBED) –&gt; Same idea as the headlight manager but for rear lights. This Arduino also flashes the brake lights of the vehicle based on CANBUS data of vehicle speed and brake pressure (the required brake pressure for a flash differs based on vehicle speed) to indicate sudden stops.</li>
  <li>Mirror manager (NANO) –&gt; Keeps track of mirror position and allows them to automatically tilt when backing up. One per mirror.</li>
  <li>Diagnostic display button manager (NANO) –&gt; Controls relays that simulate button presses to maintain functionality of old center console buttons.</li>
  <li>Steering wheel button manager (PRO MICRO) –&gt; Converts steering wheel button presses into USB keyboard data for head unit computer and sends keystrokes to CANBUS of car.</li>
  <li>Power managers (MEGA_EMBED) –&gt; Handles power delivery to components using large relay boards to provide active failover functionality and monitor current/voltage among vehicle power buses. Two of these will be installed: one in the front near the head unit and one in the trunk.</li>
  <li>Audio manager (MEGA_EMBED) –&gt; Handles audio amplifier settings (equalizer and volume) and simulates keystrokes on a Bluetooth dongle used to receive mobile audio. The current head unit design does not allow it to work as an A2DP sink so I am using a standalone Bluetooth dongle to receive mobile audio.</li>
  <li>CANBUS Controller (not sure) –&gt; Doesn’t really matter so long as it has an ethernet shield or other ethernet interface. Will store any CANBUS values used by the other computers in a local database that updates anytime new data becomes available on the CANBUS. This would be used by the Khadas VIM4 and diagnostic computer for example since it won’t have direct access to the CANBUS.</li>
</ul>

<h3 id="cameras">Cameras</h3>

<p>The planned camera layout is included below. The green semicircles are <a href="https://www.aliexpress.com/item/1005004337827464.html">136-degree FOV cameras</a> installed in the front windshield and above the rear license plate whereas the gray circles represent <a href="https://www.aliexpress.com/item/1005004335144138.html">210-degree cameras</a> (the listing says 180 degrees but they are actually 210) installed beneath side view mirrors of the car. A fifth camera is installed inside the vehicle and faces the driver for eye tracking such that the touch screen functionality of the center console display is disabled unless the driver is looking at the display to prevent accidental inputs. I planned on including a second front-facing camera on the right wing mirror to provide the driver with insight about any vehicles in the right lane ahead of the car however this camera is not included at this time since the 210-degree FOV camera installed beneath the mirror should theoretically capture all vehicles in the right lane.</p>

<p><img src="/assets/img/brz/camera_layout.png" alt="Camera layout" /></p>

<h3 id="lighting-modifications">Lighting Modifications</h3>

<p>Some modifications require extensive control of the vehicle’s lights however I am not willing to alter anything about the car’s computers so my solution consists of placing relays along the wiring harnesses controlling the vehicle’s lights with two separate computers on each end of the car. Each computer has a combination of mechanical and solid state relays depending on how frequently a light is expected to toggle on/off. Mechanical relays are used for lights that rarely toggle and because they provide a normally closed and normally open set of contacts. This is important because the lighting computers receive constant power regardless of the vehicle’s state and therefore power draw must be minimized when the vehicle is not running.</p>

<p><img src="/assets/img/brz/rear_light_manager.jpg" alt="Rear light manager computer" style="float: right; width:50%; height:80%; margin-left: 10px;" /> The rear lighting computer is pictured to the right and I expect the front computer to be highly similar. It uses four solid state relays (top left) to drive the brake lights and turn signals of the car by connecting them to the car’s battery. The third and fourth brake light of the car (third is in the windshield and fourth is F1 style in bumper) are converted to addressable LEDs and do not require relays. Addressable LEDs have also been integrated into the reverse lights (two lights adjoined to the fourth brake light) and the two rear quarter panel windows of the car. Excluding the solid state relays, the computer contains two mechanical relays (bottom left) for running lights, a CANBUS module (bottom right), an Arduino (top right), and a 5V regulator on the backside. Currently, this computer turns lights on based on whether or not live data is being sent across the CANBUS since it is always powered and I have not yet figured out what value represents the stte of the vehicle’s running lights. This is not ideal since a side effect of my current solution is that running lights turn on when doors open or the car is unlocked etc.</p>

<h3 id="cad">CAD</h3>

<p>The retrofit brackets for this vehicle were designed by first measuring and modelling the mount points to the vehicle before extruding a general shape to house all the required components. The components are then arranged on the aforementioned general shape such that their screw holes/mount points can be cut after which the bulk of the material is removed leaving a barebones structure which can be further broken down into smaller pieces to facilitate manufacturing.</p>

<p>The head unit bracket is a perfect example of this technique. The design was built symmetrically, and as such, I began by modelling the left side before mirroring it to generate the entire assembly. I knew I would need two ‘platforms’ to house all the required components so I began by measuring the mount hole positions from the old head unit and generating two basic mount ‘ears’ before extruding an arbitrary platform attached to each ear. The platforms were extended an arbitrary amount in both directions based on how much space I estimated to be available inside the vehicle’s cavity and how far the head unit display would be mounted. The head unit bracket holds the following hardware as can be seen in the <em>PIC</em> to the right:</p>

<ol>
  <li>Head unit display</li>
  <li>Head unit display driver</li>
  <li>Khadas VIM4</li>
  <li>Voltage regulator</li>
  <li>Driver-facing camera</li>
</ol>

<p>No amp needed up front since it’s in the trunk from factory. That being said it only drives the front speakers and I can’t figure out how the rear side speakers are powered so there may be more amplifiers throughout the vehicle. I also need to include an amplifier for a loudspeaker up front which may end up in the head unit if there is space.</p>
:ET