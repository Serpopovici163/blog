I"ÎV<p>I recently acquired a car for recreational purposes since I had saved up a decent amount of money and didn‚Äôt feel like investing it. I purchased a BRZ because they are built in conjunction with Toyota and this should theoretically imply that they are relatively reliable so I won‚Äôt need to worry about the mechanical aspect of the vehicle. Furthermore, this colaboration with Toyota also makes them relatively easy to work on at home which I am thankful for since I‚Äôve had to do a wealth of maintenance on it even going as far as removing failing drivetrain elements.</p>

<h1 id="idea">Idea</h1>

<h2 id="ui-enhancements">UI Enhancements</h2>

<p><img src="/assets/img/brz/planned_display_layout.jpg" alt="Picture of plan" style="float: right; width:50%; height:80%; margin-left: 10px;" /></p>

<p>The plan is to replace the head unit of the BRZ with a <a href="https://www.aliexpress.com/item/1005003546521274.html">12.3‚Äù touch-screen</a>, replace the small button cluster on the center console with a <a href="https://www.aliexpress.com/item/4000393713339.html">7‚Äù touch screen</a>, convert the analog gauge cluster to a display, and potentially add a heads up display in the windshield. The 12.3‚Äù display will be used for most vehicle functionality such as navigation and media whereas the 7‚Äù display will provide diagnostic information about the vehicle as well as any subsystems I add. Ideally, the computer running the 7‚Äù display will have access to the car‚Äôs internal computer to provide any information from DTC/SRS/ABS codes to general information about things like tire pressure.</p>

<p>The car will have an LTE modem in it to provide WiFi connectivity for passengers and allow its internal computers to access Google Maps, media streaming services, and other resources such as the Waze database to protect against police encounters. Finally, I hope to add cameras all around the car and experiment with computer vision though, aside from collision warnings and enhanced cruise control I‚Äôm not sure what I‚Äôll be able to develop. The cameras will however provide a 360-degree dash cam and I will be able to use them for a Tesla-like sentry mode when the car is locked.</p>

<h2 id="speed-enforcement-countermeasures">Speed Enforcement Countermeasures</h2>

<p>I‚Äôm hoping to, at the very least, add passive sensors for police radar/lidar and possibly even aircraft but I may not be able to add active countermeasures such as radar/lidar jamming. Based on some brief research, there is a significant risk that the officer‚Äôs radar/lidar gun would detect my jamming attempts since many of them have jamming detection built in and proper commercial lidar jammers are designed to identify the specific make/model of a lidar gun and behave accordingly.</p>

<p>Aircraft countermeasures are more reasonably achieveable since aircraft speed detection works using lines painted on the pavement at a known distance interval such that an aircraft flying above can time a vehicle crossing a set of these lines. My plan for countering this is to use a front facing camera on the car to pick up the lines at which point an onboard computer will use a software defined radio to look for any aircraft transponders within a certain radius of the vehicle. Should there be an aircraft nearby, the onboard computer will begin calling out speeds for the user to match in hopes that the average speed across the two lines does not exceed the posted limit.</p>

<p>An even more complex countermeasure I‚Äôm hoping to integrate is cellular sniffing where a computer would once again use a software defined radio to look for nearby cellular devices and fingerprint them to single out the specific make and model of cellular modem present in a Ford Interceptor. I‚Äôm unsure if this is even theoretically possible since newer cellular devices may encrypt everything but I intend to research this in depth.</p>

<p>In addition to passive countermeasures and radar/lidar jammers, the vehicle will hopefully have cellular and VHF/UHF jammers. The purpose of these is to prevent a Ford Interceptor‚Äôs cellular modem and radio from working when in close proximity to the vehicle. This way the officer will not be able to run the driver‚Äôs license or even issue tickets and this could delay a call for backup during a police chase.</p>

<h1 id="build">Build</h1>

<h2 id="design-considerations">Design considerations</h2>

<p>I initially intended to build a custom image of Android Automotive for the BRZ and develop mobile applications that would mostly run as backgroud services and overlay themselves on top of Android to display relevant information. Unfortunately this turned out to be a rather lucrative task and as of this writing I have elected to build a simple Android application running on a mobile image. The advantages of Android Automotive are as follows:</p>
<ul>
  <li>Better navigation with fully functional Google Maps (I am using the Khadas VIM4 for the head unit and it does not support Google Play Services so it cannot have any Google Maps functionality)</li>
  <li>Better media controls with proper Bluetooth integration (As far as I am aware, Android Mobile cannot be used as a A2DP sink without modifying the source code)</li>
  <li>Better boot times</li>
</ul>

<p>Overall, I did not feel these advantages were enough to justify the increased complexity of building a custom Android Automotive image especially considering how many custom UI screens and functions I intend to incorporate.</p>

<p>The purpose of rebuilding the vehicle‚Äôs UI is not only to provide a seamless means of interacting with additional functionality but also to fully hide any illegal functions on demand. As such, there must not be any visible hint of any countermeasure functionality on the inside and outside of the vehicle and as such the car is able to hide illegal functionality when in ‚Äòlegal mode‚Äô which can be enabled using arbitrary key strokes or combinations. Once in legal mode, the user is able to unlock hidden functions by entering an arbitrary set of seemingly random keystrokes using buttons throughout the car‚Äôs interior. The combination is such that it would be incredibly difficult to guess or mistakenly enter it.</p>

<h2 id="hardware">Hardware</h2>

<h3 id="computers">Computers</h3>

<p>The car will contain a multitude of computers listed below alongside their purpose:</p>
<ul>
  <li>Head Unit/Center Console (Khadas VIM4) ‚Äì&gt; Mostly displays data and video feeds, very little logic goes on here</li>
  <li>CANBUS server (Arduino) ‚Äì&gt; Acts as interface between ethernet network and vehicle‚Äôs CANBUS</li>
  <li>Gauge cluster computer (RPi Zero?) ‚Äì&gt; Listens to CANBUS and ethernet network to display data, may link this as a second display for the Khadas VIM4</li>
  <li>Safety computer (nVidia Jetson NX?) ‚Äì&gt; Uses CV algorithms on vehicle cameras and exports HDMI feeds of cameras for head unit</li>
</ul>

<p>Most of the hardware modifications are exectued by Arduinos integrated throughout the vehicle that share its CANBUS. The list of integrated Arduinos as well as the model used is as follows:</p>
<ul>
  <li>Head light manager (MEGA_EMBED) ‚Äì&gt; Used for light animations up front, has relays to control lights and voltage dividers to light input from car‚Äôs computer as well as addressable LEDs integrated in the grill.</li>
  <li>Rear light manager (MEGA_EMBED) ‚Äì&gt; Same idea but for rear lights. This Arduino also flashes the rear lights of the vehicle based on CANBUS data of vehicle speed and brake pressure (the required brake pressure for a flash differs based on vehicle speed)</li>
  <li>Mirror manager (NANO) ‚Äì&gt; Keeps track of mirror position and allows them to automatically tilt when backing up. One per mirror.</li>
  <li>Diagnostic display button manager (NANO) ‚Äì&gt; Controls relays that simulate button presses to maintain functionality of old center console buttons.</li>
  <li>Steering wheel button manager (PRO MICRO) ‚Äì&gt; Converts steering wheel button presses into USB keyboard data for head unit computer and sends keystrokes to CANBUS of car</li>
  <li>Power managers (MEGA_EMBED) ‚Äì&gt; Handles power delivery to components using large relay boards to provide active failover functionality and monitor current/voltage among vehicle power buses. Two of these will be installed: one in front near the head unit and one in the trunk.</li>
  <li>Audio manager (MEGA_EMBED) ‚Äì&gt; Handles audio amplifier settings (equalizer and volume) and simulates keystrokes on a Bluetooth dongle used to receive mobile audio. Since the head unit computer can‚Äôt be used as a A2DP sink, I am using a standalone Bluetooth dongle to receive mobile audio. This allows me to control the music from the head unit however I won‚Äôt be able to keep track of the song‚Äôs progress or display the album cover.</li>
  <li>Controller (Arduino but idk) ‚Äì&gt; Doesn‚Äôt really matter so long as it has an ethernet shield or other interface. Will store any CANBUS values used by the other computers in a local database that updates anytime new data becomes available on the CANBUS.</li>
</ul>

<h3 id="cameras">Cameras</h3>

<p>The planned camera layout is included below. The green semicircles are <a href="https://www.aliexpress.com/item/1005004337827464.html">136-degree FOV cameras</a> installed in the front windshield and above the rear license plate whereas the grey circles represent <a href="https://www.aliexpress.com/item/1005004335144138.html">210-degree cameras</a> (the listing says 180 degrees but they are actually 210) installed beneath side view mirrors of the car. A fifth camera is installed inside the vehicle and faces the driver for eye tracking such that the touch screen functionality of the center console display is disabled unless the driver is looking at the display to prevent accidental inputs. I planned on including a second front-facing camera on the right wing mirror to provide the driver with insight about any vehicles in the right lane ahead of the car that they may not be able to see. This camera is not included at this time since the 210-degree FOV camera installed beneath the right side mirror should theoretically capture any vehicles in the right lane though distortion may severely impact the resolution and thus the viability of using it.</p>

<p><img src="/assets/img/brz/camera_layout.png" alt="Camera layout" /></p>

<h3 id="steering-wheel-button-integration">Steering Wheel Button Integration</h3>

<p>Steering wheel buttons were added to BRZs in 2017 and mine is a 2013 so I purchased a salvage steering wheel in order to integrate its buttons into my systems. Should anybody else contemplate to do the same, be aware that even though steering wheels are cheap the airbag most certainly is not: a brand new OEM airbag for my car is $CAD 1100 from the dealer while a used one is ~$CAD 600.</p>

<p>The steering wheel uses a Arduino Pro Micro to convert button presses into keyboard output for the Khadas VIM4 to understand. Furthermore, it connects to the CANBUS to foward hardware-related commands to decrease latency as opposed to transferring commands from the VIM4 to other devices. In order to interface the Arduino with the steering wheel, I took apart the button clusters on each side of the 
<img src="/assets/img/brz/steering_wheel_button_connector.jpg" alt="Steering wheel button connector" style="float: right; width:50%; height:80%; margin-left: 10px;" />
steering wheel and followed traces to figure out the function of each wire. My findings are listed below for anybody else intending to reverse engineer the steering wheel buttons on a BRZ (wires are listed from left to right, top to bottom, looking at the connector from behind as depicted to the right):</p>
<ul>
  <li>Light green ‚Äì&gt; Volume and arrow keys of left side cluster</li>
  <li>Red ‚Äì&gt; Common of left side cluster</li>
  <li>Green ‚Äì&gt; Arrow keys of right side cluster</li>
  <li>Purple ‚Äì&gt; Enter and back key of right side cluster</li>
  <li>Yellow ‚Äì&gt; Common of right side cluster</li>
  <li>Black ‚Äì&gt; Call buttons, source button, left enter button, and voice button</li>
  <li>Blue ‚Äì&gt; Steering wheel ground</li>
  <li>Brown ‚Äì&gt; Cruise control pin 1</li>
  <li>Grey ‚Äì&gt; Cruise control pin 2</li>
  <li>Black + White ‚Äì&gt; LED ground</li>
  <li>White ‚Äì&gt; LED VCC (5V works but dim. Not sure I‚Äôm willing to go higher so I‚Äôll suck it up)</li>
</ul>

<p>The ‚Äòvoice‚Äô button on the right side of the steering wheel is wired to the left button cluster and its state is transmitted through the (light green or black) wire. Button states are transmitted by varying the resistance between the common pin of each button cluster and one of the two output pins of each button cluster. The Arduino interprets these using an analog pin using the INPUT_PULLUP pin mode with the common pins being connected to ground. The resulting resistance and output wire for any button press is listed below in hopes of saving someone else the effort required to decode these circuit boards though I ended up using analogRead values so these were useless to me.</p>

<table>
  <thead>
    <tr>
      <th>Left Side Cluster</th>
      <th>Right Side Cluster</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Source ‚Äì&gt; 115 Ohm BLACK</td>
      <td>Up ‚Äì&gt; 330 Ohm GREEN</td>
    </tr>
    <tr>
      <td>Call pickup ‚Äì&gt; 425 Ohm BLACK</td>
      <td>Right ‚Äì&gt; 3.1 kOhm GREEN</td>
    </tr>
    <tr>
      <td>Call hangup ‚Äì&gt; 225 Ohm BLACK</td>
      <td>Down ‚Äì&gt; 1 kOhm GREEN</td>
    </tr>
    <tr>
      <td>Volume up ‚Äì&gt; short LIGHT GREEN</td>
      <td>Left ‚Äì&gt; short GREEN</td>
    </tr>
    <tr>
      <td>Volume down ‚Äì&gt; 50 Ohm LIGHT GREEN</td>
      <td>Enter ‚Äì&gt; 100 kOhm PURPLE</td>
    </tr>
    <tr>
      <td>Right ‚Äì&gt; 115 Ohm LIGHT GREEN</td>
      <td>Back ‚Äì&gt; 101 kOhm PURPLE</td>
    </tr>
    <tr>
      <td>Left ‚Äì&gt; 245 Ohm LIGHT GREEN</td>
      <td>Voice ‚Äì&gt; 50 Ohm BLACK</td>
    </tr>
    <tr>
      <td>Enter ‚Äì&gt; short BLACK</td>
      <td>¬†</td>
    </tr>
  </tbody>
</table>

<h3 id="lighting-modifications">Lighting Modifications</h3>

<p>Some of the modifications require extensive control of the vehicle‚Äôs lights however I am not willing to alter anything about the car‚Äôs computers so my solution consists of relays placed along the wiring harnesses controlling the vehicle‚Äôs lights with two separate computers on each end of the car. Each computer has a combination of mechanical and solid state relays depending on how frequent a light is expected to toggle on/off. Mechanical relays are used for lights that rarely toggle and because they provide a normally closed and normally open set of contacts. This is important because the lighting computers receive constant power regardless of the vehicle‚Äôs state and therefore power draw must be minimized when the vehicle is not running.</p>

<p>The rear lighting computer is pictured to the right and I expect the front computer to be highly similar. <img src="/assets/img/brz/rear_light_manager.jpg" alt="Rear light manager computer" style="float: right; width:50%; height:80%; margin-left: 10px;" /> It uses four solid state relays (top left) to drive the brake lights and turn signals of the car. The third and fourth brake light of the car (third is in the windshield and fourth is F1 style in bumper) are converted to addressable LEDs and do not require relays. Addressable LEDs have also been integrated into the reverse lights (two lights adjoined to the fourth brake light) and the two rear quarter panel windows of the car. Excluding the solid state relays, the computer contains two mechanical relays (bottom left) for running lights, a CANBUS module (bottom right), an Arduino (top right), and a 5V regulator on the backside.</p>

<h3 id="cad">CAD</h3>

<p>The retrofit brackets for this vehicle were designed by first measuring and modelling the mount points to the vehicle before extruding a general shape to house all the required components. The components are then arranged on the aforementioned general shape such that their screw holes/mount points can be cut after which the bulk of the material is removed leaving a barebones structure which can be further broken down into smaller pieces to facilitate manufacturing.</p>

<p>The head unit bracket is a perfect example of this technique. The design was built symmetrically, and as such, I began by modelling the left side before mirroring it to generate the entire assembly. I knew I would need two ‚Äòplatforms‚Äô to house all the required components so I began by measuring the mount hole positions from the old head unit and generating two basic mount ‚Äòears‚Äô before extruding an arbitrary platform attached to each ear. The platforms were extended an arbitrary amount in both directions based on how much space I estimated to be available inside the vehicle‚Äôs cavity and how far the head unit display would be mounted. The head unit bracket holds the following hardware as can be seen in the <em>PIC</em> to the right:</p>

<ol>
  <li>Head unit display</li>
  <li>Head unit display driver</li>
  <li>Khadas VIM4</li>
  <li>Voltage regulator</li>
  <li>Driver-facing camera</li>
</ol>

<p>No amp needed up front since it‚Äôs in the trunk from factory. That being said it only drives the front speakers and I can‚Äôt figure out how the rear side speakers are powered so there may be more amplifiers throughout the vehicle. I also need to include an amplifier for the siren up front which may end up in the head unit if there is space.</p>

<h2 id="visual-user-interface">Visual User Interface</h2>

<h3 id="head-unit-display">Head Unit Display</h3>

<p>The large head unit display is split horizontally into two sections: a ‚Äòbig container‚Äô which is 2/3 of the display‚Äôs width and a ‚Äòsmall container‚Äô which occupies the remaining space. The views displayed by the big container and their respective purpose are as follows:</p>
<ul>
  <li>Navigation fragment ‚Äì&gt; Contains an interactive map that the user</li>
  <li>Lighting control fragment ‚Äì&gt; Handles interior accent colours and vehicle underlighting (legal light functions)</li>
  <li>Safety fragment ‚Äì&gt; Displays live view of cameras around the car as well as any computer vision-related safety warnings</li>
  <li>Settings fragment ‚Äì&gt; Allows user to modify settings of any subsystem</li>
  <li>Defence fragment ‚Äì&gt; Compliments defence fragment in small container, displays advanced countermeasures</li>
</ul>

<p>The views displayed by the small container and their respective purpose are as follows:</p>
<ul>
  <li>Media fragment ‚Äì&gt; Handles media playback controls</li>
  <li>Diagnostic fragment ‚Äì&gt; Mirror of center console display, describes states of vehicle systems</li>
  <li>Soundboard fragment ‚Äì&gt; Enables playback of custom sounds through a loudspeaker in front of vehicle</li>
  <li>Pop-up defence fragment ‚Äì&gt; Brief rundown of coutermeasure states, this fragment is automatically overlayed when vehicle detects radar/lidar etc.</li>
  <li>Traffic advisor fragment ‚Äì&gt; Allows user to control illegal light patterns of vehicle including police and hazard strobes</li>
</ul>

<p>In addition to the two primary fragment containers, a few fragments can be overlayed on top of the whole display in specific circumstances:</p>
<ul>
  <li>Parking fragment ‚Äì&gt; Overlayed when vehicle is put into reverse by driver and persists until vehicle speeds up regardless of which gear the vehicle is in. This fragment provides data from parking sensors and cameras around vehicle to facilitate parking.</li>
  <li>Merging fragment ‚Äì&gt; Pops up when merging right, provides live view of traffic in right lane so driver can see all vehicles in adjacent lane and blindspot.</li>
</ul>

<h3 id="diagnostic-display">Diagnostic Display</h3>

<p>This display provides the same view as the diagnostic fragment from the head unit display however there are also be four buttons underneath this view to replace the physical buttons that used to be in the center console. Furthermore, this display is capable of opening in depth sub-system diagnostic dialogs and clear error codes as well as execute diagnostic actions whereas the head unit fragment solely provides status information. This display runs off the same computer as the head unit since it has shared views and processes similar data (TRUE?).</p>

<p>The touch screen functionality of this display is toggled on demand using an interior-facing camera installed next to the 12.3‚Äù head unit display to track the driver‚Äôs eyes. As such, all touch screen functionality aside from the passenger seat warmer button will not function unless the driver is looking down towards the display.</p>

<h3 id="gauge-cluster-display">Gauge Cluster Display</h3>

<p>Listens to car‚Äôs CANBUS and displays the same information as was available with original gauge cluster though it also adds data for range and displays alerts from vehicle systems. (TRUE?) Furthermore, can be used to display night vision camera in front of vehicle to drive in less than optimal lighting conditions.</p>

<h3 id="heads-up-display">Heads Up Display</h3>

<p>Might scrap this but would display basic vehicle information.</p>

<h2 id="interactive-user-interface">Interactive User Interface</h2>

<p>The head unit and diagnostic displays have touchscreen functionality however the head unit display can also be controlled using steering wheel buttons for a hands free experience. The diagnostic display can only be used as a touch screen however the touch screen is disabled if the driver is not looking at the display in order to prevent misinput when shifting.</p>

<p>The right side steering wheel buttons are used to control the contents of the big container while the left side steering wheel buttons are used for the small container‚Äôs contents. Additionally, there are dedicated consistent buttons or combinations thereof that can be used to toggle critical functions such as the vehicle‚Äôs legal mode regardless of what content is live at the time.</p>
:ET