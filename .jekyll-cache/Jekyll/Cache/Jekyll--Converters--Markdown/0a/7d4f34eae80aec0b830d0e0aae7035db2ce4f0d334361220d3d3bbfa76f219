I"z+<p>This page briefly summarized the extensive amount of work that went into designing the avionics system for the University of Ottawa’s rocketry team. We unfortunately had to scrap last year’s work since it was very unorganized and we had absolutely no documentation to work off of. For this project, I was given the requirement that the system be modular, incrimentally upgradeable, and above all well documented. Fortunately, I am a fan of documentation and have included the two primary documents that describe the system below. This blog post will gloss over the design of these boards, however in-depth information is available in the documents below.</p>

<ul>
  <li><a href="/assets/img/hydra/hydra_framework.docx">Hydra Framework</a> –&gt; this document describes the general features that are to be included in each version of Hydra as well as system-wide specifications that must be respected by all Hydra PCBs.</li>
  <li><a href="/assets/img/hydra/hydra_hardware.docx">Hydra Hardware</a> –&gt; this document describes board-specific decisions for each PCB within the hardware ecosystem.</li>
</ul>

<p>Note: at the time of this writing, these documents only include V1 boards which were solely for debugging purposes. We just finished the work on V2 and will be assembling the PCBs in the coming week. (June 23, 2023)</p>

<h2 id="design">Design</h2>

<p>As previously mentioned, the key focus of this system is modularity. Modularity and redundancy go hand-in-hand in my head so I figured I’d tack that on there as a design requirement. Based on these two requirements, the obvious answer to me was to produce stackable boards that share power buses and communicate through a protocol that can accomodate a flexible amount of hosts without needing rewiring, such as CAN. Seeing as we’re building a rocket, the boards should be circular to maximize the area available within the airframe’s cross section. Finally, I consulted with the airframe team to establish the position of the mounting holes for the PCBs. From here, we ended up with a finalized set of requirements for each PCB:</p>

<ul>
  <li>140mm in diameter (slightly smaller than the 6 inch diameter of the body tube)</li>
  <li>3 equally-spaced 5.3mm mounting holes (120 degrees apart) in a 60mm radius with the first being located at the top of each PCB (directly above the center)</li>
  <li>2 standardized connectors on each side of the PCB (2 included for stability, we only really need one)</li>
</ul>

<p><img src="/assets/img/hydra/hydra_PCB_layout.png" alt="Hydra PCB layout" style="width:60%; display:block; margin-left: auto; margin-right: auto;" /></p>

<p>The pinout for each connector was then defined as follows:</p>

<p><img src="/assets/img/hydra/hydra_header_pinout.png" alt="Hydra header pinout" style="width:80%; display:block; margin-left: auto; margin-right: auto;" /></p>

<p>The left header is the main one used by the system. It provides battery power, regulated 5V, and regulated 3V3 to all the PCBs as well as shared CAN, UART, SPI, and I2C buses. SPI and I2C were included in case we wanted to make any last minute sensor additions or establish a high speed SPI datalink between specific PCBs. UART was included for Hydra V1, to communicate directly with our telemetry radio (an RFD900). In the future, the SPI, I2C, and UART interfaces may be eliminated as they likely won’t be particularly useful but we’ve kept them so far because we have no idea what to replace them with.</p>

<h3 id="sbg-systems">SBG Systems</h3>

<p>This system was designed around the <a href="https://www.sbg-systems.com/products/ellipse-series/">SBG Systems Ellipse2-N INS</a> (Inertial Navigation System) which was 
<img src="/assets/img/hydra/sbg.jpg" alt="SBG" style="float: right; width:40%; height:100%;" />
generously sponsored to us by SBG Systems. This sensor contains an IMU, barometer, magnetometer, and GPS alongside an MCU running a Kalman filter to ensure accurate data is being sent out of the sensor. From here on out, the Ellipse2-N will be referred to as ‘the SBG’.</p>

<h1 id="hydra-v1">Hydra V1</h1>

<p>The first version of the system was rushed so that we could have a functional system and prove to <a href="http://www.launchcanada.org/">Launch Canada</a> that we had a functional avionics system. This system consisted of a simple power board, with two regulators and no other functionality, and a logic board. The logic board was our first PCB containing an MCU and so its purpose was to test whether or not the circuitry surrounding the MCU was done properly. In this version, the MCU simply reads data from the SBG, writes it to the SD card onboard the logic board, and sends an update of the rocket’s state over telemetry four times a second.</p>

<h2 id="hydra_v1_logic">HYDRA_V1_LOGIC</h2>

<p><em>IMG</em></p>

<p>These were my first ever PCBs and I am not awfully proud of them given how messy and poor the design was but everybody’s gotta start somewhere I guess. The main purpose of these PCBs was to test if the MCU circuitry was ok and whether our circuitry to interface with the SD card, SBG, and telemetry radio was functional. The only thing that didn’t work on this logic board was the programming interface; I did not double check my work and managed to offset the programming pins on the MCU by two so we could not program the MCU. Luckily the firmware was written in Rust so a successful compilation most likely means everything will work. This was a beautiful thing because we ended up getting the board running by programming an MCU on a development board and then transplanting it to the logic board.</p>

<h2 id="hydra_v1_power">HYDRA_V1_POWER</h2>

<p><em>IMG</em></p>

<p>The power board is a truly ugly thing but it worked and it worked well. I ran 10A in a lab through the thinnest traces I could find and it did not even get hot. The purpose of this test was to see if we would need to upgrade to 2oz PCBs but the results confirmed that 1oz boards are fine. On a final note, this board only had reverse polarity protection and was therefore rather lacking in the power protection department. This was fixed in V2.</p>

<h1 id="hydra-v2">Hydra V2</h1>

<p>This is where things got interesting. We ordered an intermediary set of test boards, <em>pictured to the right</em>, to test the MCU schematics again this time with the programming pins wired where they should be. These boards also allowed us to test CAN between multiple boards which we had not been able to test with the V1 logic board seeing as we couldn’t actively debug it.</p>

<p>Having confirmed the MCU schematic, we then proceeded to order the V2 boards. It was very important to confirm the MCU layout because each V2 board has an MCU onboard and we must be able to interface with them all. Lastly, I’d like to add that I did not do all of the PCBs listed below; I did all the work for the V2 power board, the layout for the V2 logic board (basically the same thing as V1 but better-looking), modified the layout of the communication board to make it look more like the others, and did the recovery board. I was not supposed to do the recovery board, but the team member responsible for it was unable to complete it and so I took over last minute and threw something together.</p>

<h2 id="hydra_v2_power">HYDRA_V2_POWER</h2>

<p>This is the board I focused on and the only one I’d consider worthy of the Hydra name. This PCB provides redundant 5V and 3V3 rails to the avionics stack, can turn off any specific regulator individually or even cut avionics power outright, and contains a wealth of protections such as over-current, over-voltage, over-discharge (software-based), thermal cut-off (software- and hardware-based), and reverse polarity. Additionally, the board has a variety of voltage sensors throughout, current sensing at the input, and thermal sensors on each regulator. The MCU of this board is powered by its own internal regulators such that it remains online even if the over-current protection trips and can therefore notify the ground station of the failure and reset the current latch. Below are a couple system diagrams of the V2 power board.</p>

<p><em>IMG</em> parent diagram</p>

<p>Power can come in through either one of two connectors: the battery connector or the ground power connector. Ground power is not used in this year’s rocket but was included regardless to test the circuitry for future designs. This connector would allow the avionics to power themselves from a power source external to the rocket while the rocket is sitting on the launch pad in order to avoid draining the battery. Once we pass the ground power switch, there is a safety switch stage. These are mechanical switches that interact with a rod protruding through the airframe; when the rod is inserted, the power board is turned off. These switches are positioned sideways to decrease their vertical profile but also to prevent them from accidentally actuating in a high-acceleration event. Past the safety switches, we enter the power protection stage. At this stage, the power first goes through reverse polarity protection after which it diverges into two channels: one goes through the remaining protection circuits and another provides an internal power rail. This internal rail is always active regardless of whether the over-current or over-voltage protection has tripped and is therefore intended for use by the internal regulators that power the MCU. Additionally, this always-on power rail has its own fuse and is used to ignite the pyrotechnics inside the rocket. Doing so alleviates the risk of the over-current latch accidentally tripping due to the sudden change in current required by the pyrotechnic igniters. I’d also like to add that the reverse polarity protection was kept for the pyrotechnics rail to prevent the igniters going off during a reverse polarity event, as the body diode of the MOSFETs that drive the ignitors (on the recovery board) would conduct in a reverse polarity event.</p>

<p><em>IMG</em> regulator stage</p>

<p>Once we’re through the power protection stage, the power now reaches the main regulators of the power board. The 3V3 and 5V regulator schematics are virtually identical so I will focus on a single regulator stage, pictured above. There are two regulators that each pass through a separate MOSFET stage before reaching the power rail. The MOSFETs are driven by <em>PART NUM</em> load-sharing ICs. These sense the voltage immediately prior to the MOSFET stage as well as the voltage immediately following the MOSFET stage. They then regulate how excited the MOSFET stage is which is correlated to how much resistance the MOSFET stage adds between the regulator and the rail. In this manner, the IC can ensure that the voltage of both regulators immediately following the MOSFET stage is equal and they can therefore equally share the load they are supplying.</p>

<h3 id="power-protection-in-depth">Power protection (in depth)</h3>

<p>I really like the power protection circuit on this PCB and will go more in detail eventually.</p>
:ET