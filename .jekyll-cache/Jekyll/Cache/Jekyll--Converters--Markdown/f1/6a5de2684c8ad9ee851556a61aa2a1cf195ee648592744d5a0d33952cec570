I"f3<p>This page contains any custom PCBs I’ve ordered for the car. The two PCBs currently included are the LightLink module and a custom wake-on-CAN switch, used to cut off power delivery to computers within the car when they are not needed.</p>

<h2 id="wake-on-can-switch">Wake-On-CAN Switch</h2>

<p>The purpose of this board was derived from the development of the <a href="/brz-head-unit">head unit</a>. I needed a way to prevent components from rebooting due to the accessory power cutting off for a split second when the engine starts. My initial solution of using a microcontroller was pretty poor since running a microcontroller 24/7 beats the purpose of a power cutoff board. My second idea of using a RC network, as described in the ‘Behavioural Nightmares’ section of the <a href="/brz-head-unit">head unit</a> page worked, but I wanted more control.</p>

<p>My final solution is to mate a CAN shield with a MOSFET-based power switch. The final version of this board, described below, uses an instrumentation amplifier and comparator to detect messages on the CAN bus before toggling an op-amp-based SR latch to turn the board on/off. Additionally, this board has an integrated voltage divider and a set of OR-ing diodes at the input of the SR latch which allow the set pin of the latch to be turned on by applying an arbitrary voltage to the board; this functionality allows it to turn on using the accessory power bus of the car. A separate ‘kill’ signal can then be provided by an external source to reset the SR latch and turn off the board.</p>

<p><img src="/assets/img/brz/custom-hardware/can_switch_logic_schem.png" alt="CAN switch logic schematic" /></p>

<p>This schematic depicts the general logic of the CAN switch board. On the left side is the CAN signal detector which uses an instrumentation amp comprised of two buffers (U2A and U2D) as well as a differential amplifier (U2B). The output of U2B (labelled DIFF_AMP_OUT) then goes into a comparator (U2C) which allows us to define the minimum allowable voltage that we consider a CAN message out of the differntial amp. This serves to drop any low amplitude noise that may be generated by the differential amplifier. A standalone 5V linear regulator is included here to power the op-amp latch with logic-level voltage. The CAN signal detector operates at battery voltage, but the latch cannot do the same since the MCU’s reset signal is at logic level and would therefore not be large enough to reset the latch.</p>

<p>The voltage buffers were included mostly due to the fact that I needed a separate op-amp IC operating at logic level. In my testing, the circuit worked as intended without the voltage buffers though this test was done with a single CAN device on the network so it is possible that the lack of buffers may affect a larger network of devices. Pictured below is the output of the latch during a CAN message with the latch having already been set high; there is clearly some noise that may affect the MOSFET downstream from the latch in the schematic above but I doubt it.</p>

<p><img src="/assets/img/brz/custom-hardware/can_signal_detector_output.jpg" alt="CAN signal detector output" /></p>

<p>The comparator’s output (COMP_AMP_OUT) and accessory power signals are multiplexed at the latch using two diodes (D4 and D5). This latch circuit was taken from <a href="https://www.edn.com/use-an-op-amp-as-a-set-reset-flip-flop/">here</a>; I had initially used a simple SR-latch since I could technically avoid the illegal state of the SR latch using software to ensure the set pin wasn’t high when the MCU sets the reset pin high, but <a href="https://www.linkedin.com/in/puranjan/">D!</a> made it clear that this was poor design. Initially, he mentioned switching to a JK-latch but I elected to go with an op-amp-based latch instead to avoid needing a clock signal and since I had previously used this on the <a href="http://ludicroustech.ca/hydra/#hydra_v2_power">Hydra power board</a> for over-current protection so I knew this circuit would work.</p>

<p>Lastly, the power switch consists of two back-to-back MOSFETs to prevent bidirectional current flow when the board is off.</p>

<p><img src="/assets/img/brz/custom-hardware/can_switch_transceiver_schem.png" alt="CAN switch transceiver schematic" /></p>

<p>Finally, the SPI-CAN shield is included; this schematic is virtually identical to that of the original MCP2515 Arduino CAN shield and utilizes the same components so that I do not need to purchase these again.</p>

<p><img src="/assets/img/brz/custom-hardware/can_switch_pcb_2D.png" alt="CAN switch PCB 2D" style="width:50%; height:80%;" />
<img src="/assets/img/brz/custom-hardware/can_switch_pcb_3D.png" alt="CAN switch PCB 3D" style="float: right; width:50%; height:80%;" /></p>

<p>This is what the final PCB looks like; not the prettiest thing I know but I can’t really be asked to fix it since it’ll almost certainly work. Only one screwhole is included at the top of the PCB as I’m hoping to mount these by creating ‘slots’ in the 3D-printed parts that house them so the bottom of the PCB would go into a slot after which the top would get secured by that one screw.</p>

<h2 id="lightlink-module">LightLink Module</h2>
<h3 id="overview">Overview</h3>

<p>Control of a vehicle’s external lighting is safety critical, so I’ve settled on designing a fully-redundant custom circuit board with 12 MOSFET-driven channels to handle ‘dumb’ lights and 6 addressable channels to handle a set of addressable LED arrays retrofitted throughout the vehicle.</p>

<p>The primary challenges with designing a redundant board for this application are the required use of P-channel MOSFETs and the limited analog I/O available on the Arduino Mega I am using for control. P-channel MOSFETs are required since the car’s chassis is a system-wide ground that all components always have access to and we must therefore toggle the high side of a circuit to reliably turn it on and off. This is an issue because P-channel MOSFETs need their gates to be driven low in order to turn on but the MOSFET operates off of the car’s battery whereas the driving circuit would be operating at a much lower logic-level voltage. Therefore, an intermediary N-channel MOSFET must be used to drive the P-channel from a logic-level signal.</p>

<p>This board has gone through many design iterations with the first being as described <a href="https://circuitjournal.com/how-to-use-a-p-channel-mosfet-with-an-arduino">here</a>. I initially wanted to solely use P-channel MOSFETs (no intermediary N-channel) to decrease the number of components but this seemed like a bad idea so, in the end, I decided to settle for a more traditional design. The final design includes the intermediary N-channel MOSFETs to drive the P-channels and is described more in depth below.</p>

<h3 id="power-protection">Power Protection</h3>

<p>Very few protections were included here since the fuse placed upstream of the board’s power input should do most of the necessary protection. The board itself has its own set of fuses (one for the main power input and a separate one for the 12V input used by the LEDs) in addition to reverse polarity protection on each of the two power inputs. The reverse polarity protection uses two MOSFETs in parallel for redundancy and also to halve the resistance of the reverse polarity protection circuit thereby increasing its efficiency.</p>

<p><img src="/assets/img/brz/custom-hardware/lightlink_V3_PWR_MGMT_schematic.png" alt="MOSFET schematic" /></p>

<p>The power management schematic is pictured above. Power comes in through the left (PWR_IN and 12V_IN nets), immediately meets a fuse, and then passes through P-MOS-based reverse polarity protection. Each power rail then passes through two sets of back-to-back MOSFETs which serve to turn the board on and off; two sets of MOSFETs were once again included for redundancy and to reduce the power dissipated by this circuit. The power leaving these MOSFETs then enters the board-wide Vcc and 12V rails. A SR-latch is constructed in the top right of the schematic which serves to drive the MOSFETs that cut off power to the board; this latch is driven by the INH pin of the TCAN1043DQ1 transceiver to wake the board when it receives a CAN message and can be shut down by a KILL signal from the Arduinos.</p>

<h3 id="control">Control</h3>

<p>Two Arduino Mega EMBEDs are included for control. These were chosen because I have about a dozen on hand right now and they have been reliable in my experience. At any given moment, one of the Arduinos is considered the ‘master’. The master is in charge of outputting signals to the MOSFET and addressable channels while simoultaneously communicating its state to the slave Arduino using a UART connection. The master updates the slave at regular intervals such that the updates themselves function as ‘heartbeat’ signals ensuring the slave that the master is operating normally. Should the master miss an arbitrary amount of heartbeats for whatever reason, the slave sends a hardware reset signal to the master after which it assumes the master role and resumes signal outputs based on the last state update it received.</p>

<p>Each arduino has separate a separate CAN controller and transceiver. I am using the MCP2515 controller alongside the TCAN1043DQ1 transceiver. The MCP2515 is a well known controller and therefore has many libraries available and the TCAN1043DQ1 transceiver was chosen because it has the ability to ‘wake on CAN’. The TCAN1043DQ1 has a separate power pin that does not require an external regulator and allows it to monitor for activity on the CAN bus. Once activity is detected, it sets the INH pin high which turns on the LightLink. This provides a low-power solution to ensure this device does not drain the vehicle’s battery.</p>

<p>In addition to their independent CAN interfaces, each Arduino has its own 5V regulator. I initially wanted to provide a board-wide 5V rail with two regulators in parallel but decided this was a better solution that required less parts overall (no load sharing controllers). This removes the possibility that a short circuit caused by the failure of one Arduino/SPI interface/regulator combination won’t kill the other Arduino/SPI interface/regulator combination.</p>

<h3 id="redundant-mosfet-schematic">Redundant MOSFET Schematic</h3>

<p><img src="/assets/img/brz/custom-hardware/lightlink_mosfet_schematic.png" alt="MOSFET schematic" /></p>

<p>Two P-channel MOSFETs (Q1 and Q3) are included in parallel, both of which are immediately followed by a Schottky diode to prevent backflow from the other MOSFET. This is necessary because a diagnostic pin is included prior to the Schottky to sense the voltage at the output of each MOSFET which would be biased by backflow from the other MOSFET therefore hindering the detection of a MOSFET failure. The diagnostic connections use LM324D-based comparators to compare the voltage before the Schottky to the voltage following the Schottky. If the voltage prior to the diode falls below the voltage following the diode, the output of the LM324D swings low. This is by design since I am using digital pins for sensing MOSFET failures and digital pins can be set up as inputs with pull-up resistors in the Arduino meaning that the pin should go low when a failure occurs.</p>

<p>In addition to detecting individual MOSFET failures, the circuit includes a shunt at the MOSFET output. This allows the board to detect a short circuit or burnt light bulb based on the current being drawn from the circuit. I used single op-amp in a differential configuration to measure the voltage drop across the shunt; I’m not sure if this will work without voltage followers but it costs nothing to add the pads :)</p>

<h3 id="final-pcb">Final PCB</h3>

<p><img src="/assets/img/brz/custom-hardware/lightlink_V3_PCB.png" alt="Final PCB" /></p>

<p>This was a royal pain in the ass to route but I think it turned out rather nice. In the end, I went with a 6-layer board to make my life easier. Of the four internal layers, two are used for power and ground while the other two are used mainly to connect the Arduinos in parallel. I initially chose surface mount headers for the Arduinos (top left) so that there would be no holes in the PCB but these were reasonably-priced, low profile, and had a CAD model available so I stuck with them. The lack of holes under the headers would have made routing this much easier and possibly even doable with a 4-layer board but I’m ok with the way it turned out.</p>

<p><img src="/assets/img/brz/custom-hardware/lightlink_V3_PCB_back.png" alt="Final PCB" /></p>

<p>Altium does show some of the routing going on beneath the top layers when looking at the back of the board. I decided to keep the current sensing signals on the outer layer but most of the digital signals have been embedded deeper in the board. I also wired the last four MOSFET channels (9-12) to be PWM capable; all channels are technically PWM capable through software but 9-12 have access to hardware PWM.</p>
:ET