<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-06-25T00:10:07-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Ludicrous Tech</title><subtitle>This website keeps track of whichever projects I am most proud of and serves to share some of the knowledge I accumulate from tinkering on whatever comes to my mind. Enjoy!</subtitle><author><name>Serban Popovici</name></author><entry><title type="html">Two G-class Stage Rocket w/ Basic Telemetry</title><link href="http://localhost:4000/two-stage-rocket/" rel="alternate" type="text/html" title="Two G-class Stage Rocket w/ Basic Telemetry" /><published>2022-11-08T00:00:00-05:00</published><updated>2022-11-08T00:00:00-05:00</updated><id>http://localhost:4000/two-stage-rocket</id><content type="html" xml:base="http://localhost:4000/two-stage-rocket/"><![CDATA[<h2 id="experimenting-with-rocketry-electronics">Experimenting with rocketry electronics</h2>

<p>While I may never get a high power rocketry license, I do thoroughly enjoy developing and flying model rockets. None of my past rockets have incorporated any amount of electronics so the purpose of this project is to get a feel for rocketry electronics without any risk by developing only non-terribly-flight-critical components. For this project, I purchased the two biggest rocket engines I can legally get my hands on without any license: AeroTech G80-7T motors.</p>

<h1 id="update-may-2023">UPDATE May 2023</h1>

<p><img src="/assets/img/habibi-express/assembled_airframe.jpg" alt="Assembled airframe" style="float: right; width:30%; height:50%; margin-left: 10px;" /></p>

<p>It’s been a minute. I’ve been really busy with other commitments but the airframe is finally coming together! Unfortunately, the GPS I got does not seem to work very well. This is the second BN-880 module I’ve gotten, I assumed the first one was a fluke but I guess these are just bad GPS sensors in general. As such, I will need to reprint the nose cone to accomodate a uBlox-M8N chip I have and I will also attempt to install some cameras in the nose cone for the DVRs that I’ve added to the avionics bay. The avionics bay is also rather messy however everything works well from a software perspective. The one issue it has is that the voltage on the 5V rail drops dramatically whenever the radio sends out a telemetry packet. This does not affect the avionics systems but does affect the servo that is in charge of preventing the main chute from deploying straight away. This could be because of a bad LiPo battery that sags a bunch or simply the servo being too cheap so I will first attempt to swap the servo out with a nicer one before going to a nicer battery. I’ve already given the radio a separate 5V regulator from the other avionics and added a capacitor in parallel on the radio’s power input which should theoretically take care of the voltage drop but that has not really fixed anything so far. Given that the other electronics behave themselves, it’s almost certainly an issue with the servo.</p>

<p><img src="/assets/img/habibi-express/avionics_front.jpg" alt="Avionics front" style="float: left; width:50%; height:80%;" />
<img src="/assets/img/habibi-express/avionics_rear.jpg" alt="Avionics rear" style="float: right; width:50%; height:80%;" /></p>

<p>Definitely not a fan of how messy the wiring is but I don’t see it getting much better with the amount of tech stuffed in there. I’ve added an APM power module to use its regulator and add current/voltage sensing to the Arduino so I can get this info through telemetry. There are two sets of wires coming out of the top of the avionics assembly: the first (with the white connector) go to the GPS in the nose cone and the second set (4 free wires) are for power and two video feeds coming from cameras in the nose cone. The four wires at the bottom are for the second stage ignitor and the ejection charge ignitor.</p>

<h1 id="update-nov-2022">UPDATE Nov 2022</h1>

<p>Project is not on track, too many things going on in school however the avionics bay has been printed and mostly assembled. The nose cone is being redesigned to house status LEDs, the GPS, and two cameras for in-flight footage. Pictures coming soon.</p>

<h1 id="update-oct-2022">UPDATE Oct 2022</h1>

<p><img src="/assets/img/habibi-express/recovery_layout_update.jpg" alt="Recovery layout update" style="float: right; width:10%; height:20%; margin-left: 10px;" /> 
Progress is being made on flight controller firmware, the I2C issue has been fixed, and the IMU data is now being read as well. Turns out the Adafruit BMP280 library was looking for the wrong address and I had to force it to read data from the true address. Engine mounts and fins have been attached to the rocket, currently focused on recovery charge and how to protect the rocket’s internals from the motor’s ejection charge as well as the true ejection charge. The motor mounts have plenty of space around them to allow the motor’s ejection charge gases to escape however I need to add a component following the motor to shield the parachute from the motor’s charge and contain the true ejection charge as well. The planned layout is pictured to the right where the green block represents the blast shield, red represents the true ejection charge, yellow represents the drogue chute, and cyan represents the final chute. The rocket splits between the cyan and yellow blocks when the ejection charge detonates.</p>

<p>The avionics bay has been expanded to include MOSFETs for the second stage and ejection charge igniters as well as an SD card reader for data logging, servo to retain the primary parachute, and two DVRs (scrapped the camera inside the body tube). The second stage will be ignited based on the following criteria:</p>
<ul>
  <li>Rocket attitude is within 30 degrees of launch attitude (makes sure the rocket is vertical)</li>
  <li>Rocket altitude is greater than 250 meters (should be 500 meters or so based on simulation)</li>
  <li>Rocket acceleration drops noticeably (simulation suggests peak of 13 Gs however the software will just look for a drop of ~5Gs)</li>
  <li>Launch was detected less than 10 seconds ago (makes sure the conditions cannot be met unless the rocket just took off)</li>
</ul>

<p>Once launch is detected (as a peak in acceleration), the rocket will begin a 3-second timer before checking the conditions listed above and igniting the second stage. Apogee will be detected when vertical acceleration drops below -5m/s^2 after which the ejection charge will be ignited. The final chute will be deployed 250 meters above ground level based on barometric data. Launch window has been slightly pushed back however it should be achievable by end of November :)</p>

<h1 id="update-sep-2022">UPDATE Sep 2022</h1>

<p><img src="/assets/img/habibi-express/fin_laser_cutting.jpg" alt="Laser cutting fins" style="float: right; width:30%; height:50%; margin-left: 10px;" />
Finally got around to laser cutting the fins and I have worked slightly on the firmware for the flight controller. Unfortunately I’m having issues with the barometer since it communicates using 3.3V so the Arduino Mega is not able to interpret the I2C data coming from it. The current solution is to replace the barometer with a proven chip that I can find online as working with the Arduino Mega. I will also attempt to read the I2C data using another 5V Arduino to verify that this is indeed the issue. Finally, I have decided to add a few <a href="https://www.aliexpress.com/item/1005002457700952.html">video recorders</a> and a few analog cameras to capture a few angles of the flight. I’m hoping to add a downward facing camera, a side facing camera, and one looking down the body tube towards the main stage engine to capture the ejection from inside the rocket. I intend model camera mounts and redo the avionics bay by the end of October such that the rocket can be flown early November at the latest.</p>

<h1 id="update-jun-2022">UPDATE Jun 2022</h1>

<p><img src="/assets/img/habibi-express/avionicsFront.jpg" alt="Assembled avionics bay" style="float: right; width:30%; height:50%; margin-left: 10px;" />
The avionics bay has been assembled though it is missing a couple key elements. Firstly, there is no voltage regulator to step down the LiPo’s voltage for the Arduino and related electronics; furthermore, I need to integrate a relay, so the Arduino can ignite the second stage motor once the initial one burns out. Finally, the antenna installed on the design right now can not be used and is solely there to ensure that I don’t accidentally burn the LoRa transceiver by powering it on without an antenna. Everything on the module at the moment is completely wired and ready to go. I have noted the I2C addresses of the MPU6050 and BMP280 and the wire with the white connector sticking out the top of the avionics bay goes to the GPS sensor in the nose cone of the aircraft.</p>

<p>The software for this design won’t be too involved as the Arduino only needs to ignite the second stage 3 seconds after the MPU6050 detects a decrease in vertical acceleration all while broadcasting GPS, altitude, and attitude data at regular intervals. The main concern now is developing viable fins for the rocket body. I am hoping to have them laser-cut at the university but I have yet to inquire about using the equipment.</p>

<h1 id="update-mar-2022">UPDATE Mar 2022</h1>

<p><img src="/assets/img/habibi-express/avionics-CAD-V2-back.PNG" alt="Avionics bay V2 back" style="float: right; width:30%; height:50%; margin-left: 10px;" />
The avionics bay is mostly finalized, and I will attempt to print this soon; I’ve done without the 18650 battery and kept the 3s LiPo which is now housed in a casing at the top of the avionics bay. The LoRa module is now positioned such that an antenna can be directly attached to the module and have space in the rocket fuselage. The only thing lacking from the model to the right is a relay holder to ignite the second stage. I still need to remodel the nose cone since the current GPS holder may not have clearance, so it must be shifted upwards after which I will begin 3D printing these components and assembling the rocket!</p>

<h1 id="update-feb-2022">UPDATE Feb 2022</h1>

<p><img src="/assets/img/habibi-express/rocket-CAD.PNG" alt="Rocket model" style="float: right; width:50%; height:50%; margin-left: 10px;" />
CAD model is now mostly finished, lots of small things still need to be figured out however most of the grunt work is done. I don’t have a concrete plan for how to wire the main stage motor’s igniter in a way that won’t risk tangling the parachute during recovery. Furthermore, I purchased two G80-7T motors however the rocket will need at least 10 seconds after the main stage burns out to reach its apogee meaning that I most likely need to source a G80-13T motor to avoid using any complex recovery mechanisms. Unfortunately, <a href="https://www.greathobbies.com/">Great Hobbies</a> does not carry G80 motors anymore, so I can only source these for unreasonably high prices from <a href="https://www.allrockets.ca/G80-13">AllRockets</a>.</p>

<p><img src="/assets/img/habibi-express/avionics-CAD.PNG" alt="Avionics model" style="float: right; width:30%; height:50%; margin-left: 10px;" />
Main focus now is the avionics bay. The model pictured here has space for an Arduino Mega 2560 (embed), a BMP280, an MPU6050, a LoRa SX1278 transceiver, and two batteries. The nose cone contains a GPS antenna bracket for positioning as well. This is the second iteration of the avionics bay, and it contains space for both an 18650 Li-Ion cell (in green) and a small 3S 700mAh LiPo next to the Li-Ion cell. I’m concerned that the ~3V from the 18650 will not be enough to ignite the main stage of the rocket even with a boost converter which is why I included the LiPo. I originally considered using the 18650 in light of its higher energy density however it only has roughly 1.5 times the energy stored by the LiPo so it will likely be discarded in the next iteration.</p>

<h1 id="update-dec-2021">UPDATE Dec 2021</h1>
<p>Rocket design was finalized in <a href="https://openrocket.info/">OpenRocket</a> and basic simulation was done; maximum altitude estimated at roughly 1.1km with a max speed of Mach 0.52. I made some faster designs and others with higher apogees, but this model seems the most predictable based on how much tech I want to fly with the rocket and how lightly I can manufacture things.</p>

<p><img src="/assets/img/habibi-express/open-rocket-sim.PNG" alt="OpenRocket Model" />
<img src="/assets/img/habibi-express/open-rocket-sim-graph.PNG" alt="OpenRocket Simulation" /></p>

<h1 id="design">Design</h1>
<h2 id="motor-mounts">Motor mounts</h2>

<p><img src="/assets/img/habibi-express/motor-mount-and-coupler.png" alt="Recovery layout update" style="float: right; width:35%; margin-left: 10px;" /> 
I watched a <a href="https://www.youtube.com/watch?v=4fhoCt9vXA8">video</a> by ProjectAir on YouTube about a rocket he built using similarly powerful motors and I based my rocket motor mounts on his design. The motor mounts consist of a small tube for the motor and a larger tube that fits snugly into the rocket body. These two are connected by 8 perpendicular supports between the two cylindrical extrusions. The holes on the bottom of this motor mount also work to hold the first stage onto the main stage by using 8 pegs protruding from the first stage which fit snugly into the 8 holes of the motor mount above.</p>

<p>A screenshot of the motor mount CAD (black) and the first stage coupler (gray) is included to the right. One of the pegs on the coupler is hollow, allowing ignition wires to reach the bottom of the second stage motor.</p>

<h2 id="avionics">Avionics</h2>

<p>I intend to have live data logging and telemetry at the very least. This rocket will include a GPS, barometer, and accelerometer as well as an ignition system for the main stage engine. I would also like to include some system that can delay the deployment of the main chute since it will significantly increase the rocket’s drift during recovery however I’m unsure of how reliably I can integrate such a feature. All the electronics will be housed near/in the nose cone and the rocket will separate close to the main stage motor for recovery such that the body tube/nose cone section containing the electronics remains intact.</p>]]></content><author><name>Serban Popovici</name></author><summary type="html"><![CDATA[Experimenting with rocketry electronics]]></summary></entry><entry><title type="html">Security Camera Privacy Hack</title><link href="http://localhost:4000/camera-privacy-hack/" rel="alternate" type="text/html" title="Security Camera Privacy Hack" /><published>2022-10-16T00:00:00-04:00</published><updated>2022-10-16T00:00:00-04:00</updated><id>http://localhost:4000/camera-privacy-hack</id><content type="html" xml:base="http://localhost:4000/camera-privacy-hack/"><![CDATA[<h2 id="enhancing-privacy-of-cheap-security-cameras">Enhancing privacy of cheap security cameras</h2>

<p>I’ve always been a little paranoid of having IoT devices live streaming views of my living space however I have a long trip coming up so a couple security cameras would be nice to keep an eye on my place. I considered a couple ways of modifying the cameras to provide more privacy:</p>

<ul>
  <li>A Python script that forges HTTP requests and orders the camera to turn around;</li>
  <li>A physical shutter external to the camera that blocks the lens; and</li>
  <li>An internal relay that cuts power to the camera module.</li>
</ul>

<p>Unfortunately these were not ideal. The first idea was unreliable because turning the camera through a script still allows the camera to turn itself back on its own and may not be reliable should a software update be pushed that depreciates my integration of the camera’s API. The second was not an elegant solution and would be difficult to integrate on a PTZ camera that moves around. 
<img src="/assets/img/foscam-hack/whole_camera.jpg" alt="Final camera with LED" style="float: right; width:50%; height:80%;" />
Finally, the third did not work because the camera would not come back online after the camera module got disconnected from its motherboard, no matter what I tried. In the end I settled on modifying the camera’s internal IR-CUT filter by covering the IR-CUT part with a sticker and integrating a microcontroller to toggle the state of the filter assembly. This was an elegant and invisible solution that should not noticeably affect image quality since the camera is being used indoors so there should be very little ambient IR light. The final state of the camera is pictured to the right with a status LED jankily integrated below the FOSCAM logo.</p>

<p>The privacy mode of these cameras is toggled using a Home Assistant - Ring integration that allows the cameras to see when the Ring alarm is armed.</p>

<h1 id="hardware">Hardware</h1>

<p>While understandably not the most secure way to go about this, I used a few NodeMCU 1.0 modules I had laying around for this project. A more ideal solution would be to either use separate transceivers to air-gap the privacy microcontrollers from the internet or to use a WiFi/Bluetooth capable microcontroller that can sniff and determine what devices are around it. Regardless, the hardware here is relatively simple. The camera has:</p>

<ul>
  <li>An ESP-12E module;</li>
  <li>A WS2812B LED; and</li>
  <li>A MX1508 H-bridge IC.</li>
</ul>

<p>The MX1508 was needed since the ESP operates at 3.3V however the IR-CUT filter mechanism requires a higher voltage to actuate. The LED provides a hardcoded correlation between the state of the IR-CUT filter and a visual indication of whether the camera is able to see anything. The code for this is rather simple and included on my GitHub.</p>

<p><img src="/assets/img/foscam-hack/IR_cut_assembly.jpg" alt="IR cut assembly" style="float: left; width:50%; height:80%;" />
<img src="/assets/img/foscam-hack/MX1508_wired.jpg" alt="MX1508 wired" style="float: right; width:50%; height:80%;" />
<img src="/assets/img/foscam-hack/ESP.jpg" alt="ESP position" style="float: left; width:50%; height:80%;" />
<img src="/assets/img/foscam-hack/ESP_tucked_in.jpg" alt="ESP tucked in" style="float: right; width:50%; height:80%;" /></p>

<p>The first picture (top left) depicts the IR cut filter before I modified it by adding tape to one of the transparent partitions. The second depicts the wiring for the H-bridge, nothing too complex there. The H-bridge was covered in tape to prevent it from shorting with anything else in the camera and then placed in the back of the camera’s head, next to the motor (not pictured). The ESP was tucked in above the motherboard of the camera and leeches power off of the motherboard for itself. The camera receives regulated 5V at its DC input jack so no special considerations were needed.</p>]]></content><author><name>Serban Popovici</name></author><summary type="html"><![CDATA[Enhancing privacy of cheap security cameras]]></summary></entry><entry><title type="html">BRZ Head Unit</title><link href="http://localhost:4000/brz-head-unit/" rel="alternate" type="text/html" title="BRZ Head Unit" /><published>2022-10-01T00:00:00-04:00</published><updated>2022-10-01T00:00:00-04:00</updated><id>http://localhost:4000/brz-head-unit</id><content type="html" xml:base="http://localhost:4000/brz-head-unit/"><![CDATA[<p>This page outlines the process of modifying the BRZ’s stock head unit to contain custom components. I maintained the casing of the original head unit to avoid designing custom mounting hardware and alleviate the need to reverse engineer the casing/mounting point dimensions.</p>

<h2 id="architecture">Architecture</h2>

<p><em>include block diagram of design here</em></p>

<h2 id="final-product">Final Product</h2>

<p><img src="/assets/img/brz/head_unit_assembly.jpg" alt="Head unit assembly process" style="float: right; width:50%; height:80%; margin-left: 10px;" /></p>

<p>The updated head unit was a very satisfying thing to assemble. It effectively assembles from bottom to top as you would a layered cake, with each ‘level’ of electronics stacking on top of each other. Each layer as well as the components it houses is discussed more in depth in the Internal CAD section. The pictures below display the assembly process and final result:</p>

<p><img src="/assets/img/brz/head_unit_internals_real.jpg" alt="Head unit internals" />
<img src="/assets/img/brz/final_head_unit.jpg" alt="Final head unit" /></p>

<p>The final product, pictured above, came out rather clean! There’s a ribon cable protruding from the front that goes to the main media display and there are a few small JST-SM connectors as well as some generic I/O on the back to interface with the center console display, CAN bus, and various other things. My initial plan was to mount the display to the head unit itself, but aligning it with the trim and designing a mount that can be secured while also being removeable for a display as large as mine proved incredibly difficult. I therefore settled for mounting the display in the trim piece itself with only a ribon cable connecting it to the head unit. The original head unit is included below though I had already removed the CD player in this picture which is why it is missing its top XD.</p>

<p><img src="/assets/img/brz/head_unit_original.jpg" alt="Original head unit" /></p>

<p>I found a blog post and managed to obtain the stock wiring plugs for the head unit (Metra 70-1761) to get power and interface with the vehicle’s speakers. Lastly, the head unit gets a few state-related signals from the car such as a reverse signal (to turn on the backup camera) and an illumination signal (to notify it when the running lights are on). Both of these signals are forwarded back out through the JST-SM connectors and will connect to a transceiver computer by the car’s OBD port such that they can be encoded into CAN packets that are passed through my CAN network. This allows all of my hardware to keep track of their state and reduces the amount of hardware required in the head unit itself.</p>

<h2 id="cad">CAD</h2>

<p>The head unit CAD solely consists of a mounting framework to include all the necessary hardware within the casing of the stock head unit. I initially intended to mount the media display to the head unit itself however I ended up simply mounting it to the trim piece which saved me a ton of work. Of the two pictures included below, the first shows the CAD of the internal framework that holds all the components in the head unit whereas the second is a picture of the assembled head unit. 
<img src="/assets/img/brz/head_unit_internals.png" alt="Head unit internals" /></p>

<p>The inside of the OEM head unit’s casing has been redesigned to utilize a series of stackable brackets providing mounting points for the following components:</p>

<ol>
  <li>Khadas VIM4 –&gt; Linux backend computer</li>
  <li>USB 5.1 sound card –&gt; Required since Khadas VIM4 does not have a DAC onboard</li>
  <li>RCA to HDMI converter –&gt; Used to convert thermal camera to HDMI since Khadas VIM4 has an HDMI in</li>
  <li>NVMe SSD –&gt; used for dashcam/blackbox purposes</li>
  <li>SPI CAN shield –&gt; connects Khadas VIM4 to the CAN bus</li>
  <li>Raspberry Pi 4B –&gt; Android frontend computer</li>
  <li>Head unit display driver boards –&gt; two boards, one for power delivery and another for logic</li>
  <li>2CH amplifier boards (2 of these) –&gt; amplify audio for FL, FR, RL, and RR channels</li>
  <li>5V regulator –&gt; provides 5V for Khadas VIM4, Raspberry Pi, USB DAC, and RCA to HDMI converter</li>
  <li>Voltage splitter –&gt; splits battery voltage for display driver, amplifiers, and 5V regulator which do not require upstream power regulation</li>
</ol>

<p>There are 4 total brackets in the CAD design depicted above. The bottom bracket solely holds the display driver and Raspberry Pi, the second bracket holds the VIM4 alongside its NVMe SSD and CAN shield, the third holds one of the amplifiers and the display driver’s power board, and the fourth holds the final amplifier alongside the 5V regulator, USB DAC, and RCA to HDMI converter. The third bracket has a gap on the right side of the image to provide clearance for the VIM4’s fan.</p>

<h2 id="display-mounting">Display Mounting</h2>

<p><img src="/assets/img/brz/displays_mounted_unfinished.jpg" alt="Unfinished display mounts" style="float: right; width:50%; height:80%;" /></p>

<p>Two displays are currently connected to the head unit: a media display and the center console display. I’ve mostly finalized the mount for the media display and the mount for the center console display is about halfway done. In the picture to the right, neither display mount is finalized. The media display does not have body filler and is therefore overhanging above the trim piece on either side and the center console display does have a finalized mounting bracket but no body filler to mate it with the vehicle’s trim.</p>

<h3 id="media-display-mount">Media Display Mount</h3>

<p>Starting with the media display, I decided to refrain from mounting it to the head unit itself. Instead, I modified the stock trim with body filler to hold the new display which enabled me to effortlessly achieve a more ‘stock’ aesthetic. Below are a set of pictures of the process; I feel the final product is pretty decent, having never used body filler before. My only complaint is that the right side of the display does not mate perfectly with the trim pieces but I simply haven’t had the time and motivation to take it apart and attempt to fix this. Since the display spans across both trim pieces, I’d need to mount them both in the vehicle and sand them together to achieve a nice finish all while trying to match the display’s profile without being able to have the display inserted during sanding.</p>

<p><img src="/assets/img/brz/media_bondo_1.jpg" alt="Bondo work 1" style="float: left; width:49%; height:80%;" />
<img src="/assets/img/brz/media_bondo_2.jpg" alt="Bondo work 2" style="float: right; width:49%; height:80%;" />
<img src="/assets/img/brz/media_bondo_3.jpg" alt="Bondo work 3" style="float: left; width:49%; height:80%;" />
<img src="/assets/img/brz/media_bondo_4.jpg" alt="Bondo work 4" style="float: right; width:49%; height:80%;" /></p>

<p>The final product obviously isn’t perfect, but when painted black and mounted to the dash, it looks pretty good.</p>

<h3 id="center-console-display-mount">Center Console Display Mount</h3>

<p><img src="/assets/img/brz/center_console_display_cut_plan.jpg" alt="Center console display cut plan" style="float: right; width:50%; height:80%;" /></p>

<p>This display was a little more intricate to mount. I began by using a soldering iron to cut a somewhat-arbitrary hole in the center console. I knew I wanted to use the sides of the seat warmer button cutout as the edge of my display and the rest of the cut was more or less arbitrary. I cut up to the silver trim piece and completed a rectangular shape as depicted to the right (excuse the crappy sketch). The only requirement for this hole is that it be smaller than the display which allows the 3D printed bracket holding the display to mate seamlessly with the center console.</p>

<p>he 3D-printed bracket was designed to rest on the ledge that was left on the center console (1) and mount to some existing screwholes within the center console trim that were used for the
<img src="/assets/img/brz/center_console_bracket_1.jpg" alt="Center console display bracket 1" style="float: right; width:50%; height:80%;" />
sport mode/traction control buttons (2). Unfortunately, there is still a corner of the bracket (3) that is not supported by anything but I have not found this to be an issue when using the display. Lastly, the driver PCB for the display is mounted on the bottom of the 3D-printed bracket and connects to the head unit using an HDMI cable and a USB cable to provide power and data for the digitizer. Below are two pictures of the final product with the display sitting flush along the center console. I did end up redoing the bracket a few times after this as the bottom part of the display (3 in the picture above) kept popping out when the shifter trim was inserted as the shifter trim pushed back against the display bracket. The only thing that is left to do at the moment is add body filler to better mate the display to the shifter trim piece.</p>

<p><img src="/assets/img/brz/center_console_bracket_2.jpg" alt="Center console display bracket 2" style="float: left; width:49%; height:80%;" />
<img src="/assets/img/brz/center_console_bracket_3.jpg" alt="Center console display bracket 3" style="float: right; width:49%; height:80%;" /></p>

<h2 id="behavioural-nightmares">Behavioural Nightmares</h2>

<p>There was no shortage of software issues when trying to get this head unit to function as a head unit. Part of the premise of this project was the idea that there was no way I could end up with less functionality than my original head unit, which would only really play bluetooth media. This statement remained rather untrue for the first couple weeks of having the new head unit installed for a variety of reasons which I will list below:</p>

<ul>
  <li>Wireplumber: This problem took a buddy and I many hours to solve because it is not thoroughly documented and we suspected many other things to be wrong. The issue was that Wireplumber would check for a logged in user and refuse to play audio unless someone was logged in. There ended up being a config file burried in Ubuntu’s filesystem that disabled this behaviour and allowed the system to play audio regardless of there being a user logged in. This issue also prevented a bluetooth device from being connected to the head unit since the Khadas VIM4 would instantaneously drop the connection as a result of there being no audio session manager active.</li>
  <li>Amp fine-tuning: I got cheap audio. Of course I did. The setup works but it has its flaws. The speakers in the car seem to be rather low impedance and therefore sensitive to electrical noise which is a tremendous issue with low quality amplifiers. I’ve mitigated this by setting the volume adjustment potentiometer of each amp just a hair above 0%. This generally works but the amplifier or USB sound card clearly clips when I try to play things at an excessive volume. I know it’s not the speakers topping out, it sounds artificial and could probably be fixed if I increased the volume setting of the amp. The noise I’m referring to is a clicking sound that lines up with the status LED on the Khadas VIM4. There is no electrical noise prior to the VIM4 booting which seems to imply that the issue lies with my USB DAC.</li>
  <li>Phone calls: This is likely related to the Wireplumber issue but I have yet to figure out how to get phone calls working in the car. My phone recognizes the car as a bluetooth headset but the car neither plays the phone call audio or returns any audio from the microphone. I’ve been told this could be because ofono is installed and Wireplumber attemps to use it for phone calls instead of handling the audio forwarding itself, however I have not been able to find ofono and I frankly have yet to analyze how the VIM4 handles audio sources/sinks when a phone call is active.</li>
  <li>Touch screen issues: The driver for the center console display has an input for the digitizer and a USB output labeled “touch”, however I do not get any touch inputs on the Raspberry Pi. This could be a software issue but it’s most likely a hardware issue since the manufacturer shipped me an extra, small PCB dedicated for handling the digitizer. I will hopefully swap this in soon and see if that fixes it. My weird display architecture (large media display w/o touch and smaller center console display w/ touch) does not allow me to run Android on the head unit as I had initially planned so I am going to rewrite the UI, most likely in NodeJS with Electron.</li>
  <li>Battery issues: I somehow managed to overlook one of the primary improvements I intended to make when designing this new head unit. The car, for whatever reason, cuts accessory power for a fraction of a second anytime the engine is started. This naturally causes all electronics running off of accessory power to reboot. My last minute addition is pictured below and consists of an Arduino with a CAN transceiver (a half-assed attempt at integrating wake-on-CAN functionality), a relay, and a voltage divider connected to the accessory power wire. I included the Arduino because I had previously kept an identical one powered on in the car 24/7 without issues but this one kept glitching and turning on the head unit. This naturally left me without power on many occasions, so much so that I wired an XT60 to my car battery and kept a 3S LiPo with me at all times to jump the car. My new solution is to include a capacitor and resistor in parallel that drive MOSFETs to turn the head unit on. The capacitor and resistor network is connected to the accessory power and the components are chosen such that they allow ~3 seconds before the MOSFETs shut off. The MOSFETs lie between the head unit’s power input and the constant 12V power provided by the vehicle.</li>
</ul>]]></content><author><name>Serban Popovici</name></author><summary type="html"><![CDATA[This page outlines the process of modifying the BRZ’s stock head unit to contain custom components. I maintained the casing of the original head unit to avoid designing custom mounting hardware and alleviate the need to reverse engineer the casing/mounting point dimensions.]]></summary></entry><entry><title type="html">BRZ Wiring</title><link href="http://localhost:4000/brz-wiring/" rel="alternate" type="text/html" title="BRZ Wiring" /><published>2022-10-01T00:00:00-04:00</published><updated>2022-10-01T00:00:00-04:00</updated><id>http://localhost:4000/brz-wiring</id><content type="html" xml:base="http://localhost:4000/brz-wiring/"><![CDATA[<p>Don’t even get me started.</p>

<p><img src="/assets/img/brz/wiring_1.jpg" alt="Wiring 1" style="float: left; width:50%; height:80%;" />
<img src="/assets/img/brz/wiring_2.jpg" alt="Wiring 2" style="float: right; width:50%; height:80%;" /></p>

<p><img src="/assets/img/brz/wiring_3.jpg" alt="Wiring 3" style="float: left; width:50%; height:80%;" />
<img src="/assets/img/brz/wiring_4.jpg" alt="Wiring 4" style="float: right; width:50%; height:80%;" /></p>

<p><img src="/assets/img/brz/wiring_5.jpg" alt="Wiring 5" />
<img src="/assets/img/brz/wiring_6.jpg" alt="Wiring 2" /></p>]]></content><author><name>Serban Popovici</name></author><summary type="html"><![CDATA[Don’t even get me started.]]></summary></entry><entry><title type="html">BRZ Gallery</title><link href="http://localhost:4000/brz-gallery/" rel="alternate" type="text/html" title="BRZ Gallery" /><published>2022-10-01T00:00:00-04:00</published><updated>2022-10-01T00:00:00-04:00</updated><id>http://localhost:4000/brz-gallery</id><content type="html" xml:base="http://localhost:4000/brz-gallery/"><![CDATA[<h2 id="accident">Accident</h2>

<p><img src="/assets/img/brz/accident.jpg" alt="Accident" style="float: right; width:50%; height:80%;" /></p>

<p>I managed to rear end someone in this car, definitely my fault, but I was not willing to let it die that soon because I had barely done any work on it. The accident luckily wasn’t very bad, the other car suffered next to no damage and mine took most of the hit. I wasn’t going awfully fast when I hit the other car so my front end did not crumple much and the car was therefore perfectly fine, mechanically speaking that is. Here are pictures of the repair process :)</p>

<p><img src="/assets/img/brz/repair_1.jpg" alt="Repair 1" style="float: left; width:50%; height:80%;" />
<img src="/assets/img/brz/repair_2.jpg" alt="Repair 2" style="float: right; width:50%; height:80%;" />
<img src="/assets/img/brz/repair_3.jpg" alt="Repair 3" />
<img src="/assets/img/brz/repair_4.jpg" alt="Repair 4" /></p>

<p>Here are some pictures immediately following the accident showing the extent of the damage. I bent a variety of things up front but the frame rails of the car remained straight. These pictures show the bent front crash bar, bent rad support, bent fender, and bent hood. This happened in the fall when I didn’t have much capital to throw around so I solely replaced the front crash bar and rad support which allowed the hood to close again. Due to the way the car was bent, the hood would not close again once I finally got it open.</p>

<p><img src="/assets/img/brz/repair_5.jpg" alt="Repair 5" style="float: left; width:50%; height:80%;" />
<img src="/assets/img/brz/repair_6.jpg" alt="Repair 6" style="float: right; width:50%; height:80%;" />
<img src="/assets/img/brz/repair_7.jpg" alt="Repair 7" style="float: left; width:50%; height:80%;" />
<img src="/assets/img/brz/repair_8.jpg" alt="Repair 8" style="float: right; width:50%; height:80%;" /></p>

<p>Even with the rad support replaced, the hood did not line up appropriately with the front bumper which makes sense. As it turns out, the passenger side fender support bracket was bent in addition to the fender itself, both of which dictate how the bumper and headlight mount. The hood was definitely bent itself and the hood hinges were also bent which further influenced the panel gaps on the car.</p>

<p><img src="/assets/img/brz/repair_9.jpg" alt="Repair 9" style="float: left; width:50%; height:80%;" />
<img src="/assets/img/brz/repair_10.jpg" alt="Repair 10" style="float: right; width:50%; height:80%;" />
<img src="/assets/img/brz/repair_11.jpg" alt="Repair 11" style="float: left; width:50%; height:80%;" />
<img src="/assets/img/brz/repair_12.jpg" alt="Repair 12" style="float: right; width:50%; height:80%;" /></p>

<p>The pictures above were from replacing the fender support bracket one spring time came around. This definitely improved panel gaps however they most definitely weren’t fixed due to the hood still being bent. Furthermore, the passenger side fender had rusted while the car was in storage for the winter so I ended up purchasing a new fender and having it paint-matched professionally.</p>

<p><img src="/assets/img/brz/repair_13.jpg" alt="Repair 13" style="float: left; width:50%; height:80%;" />
<img src="/assets/img/brz/repair_14.jpg" alt="Repair 14" style="float: right; width:50%; height:80%;" />
<img src="/assets/img/brz/repair_15.jpg" alt="Repair 15" style="float: left; width:50%; height:80%;" />
<img src="/assets/img/brz/repair_16.jpg" alt="Repair 16" style="float: right; width:50%; height:80%;" /></p>

<p>These were the final steps of the repair. I sent my airbag module to the states and also went there to pick up a new bumper alongside all the accompanying trim pieces. I got a black hood from Toronto and then sent the car in for paint to have the whole front end redone :)</p>

<p><img src="/assets/img/brz/repair_17.jpg" alt="Repair 17" /></p>

<p>And just like that, she’s back!</p>]]></content><author><name>Serban Popovici</name></author><summary type="html"><![CDATA[Accident]]></summary></entry><entry><title type="html">BRZ User Interface</title><link href="http://localhost:4000/brz-user-interface/" rel="alternate" type="text/html" title="BRZ User Interface" /><published>2022-10-01T00:00:00-04:00</published><updated>2022-10-01T00:00:00-04:00</updated><id>http://localhost:4000/brz-user-interface</id><content type="html" xml:base="http://localhost:4000/brz-user-interface/"><![CDATA[<h3 id="head-unit-display">Head Unit Display</h3>

<p>The large head unit display is split horizontally into two sections: a ‘big container’ which is 3/4 of the display’s width and a ‘small container’ which occupies the remaining space. The views displayed by the big container and their respective purpose are as follows:</p>
<ul>
  <li>Navigation fragment –&gt; Contains an interactive map that the user</li>
  <li>Lighting control fragment –&gt; Handles interior accent colours and vehicle under-lighting (legal light functions)</li>
  <li>Safety fragment –&gt; Displays live view of cameras around the car as well as any computer vision-related safety warnings</li>
  <li>Settings fragment –&gt; Allows user to modify settings of any subsystem</li>
  <li>Defense fragment –&gt; Compliments defense fragment in small container, displays advanced countermeasures</li>
</ul>

<p>The views displayed by the small container and their respective purpose are as follows:</p>
<ul>
  <li>Media fragment –&gt; Handles media playback controls</li>
  <li>Diagnostic fragment –&gt; Mirror of center console display, describes states of vehicle systems</li>
  <li>Soundboard fragment –&gt; Enables playback of custom sounds through a loudspeaker in front of vehicle</li>
  <li>Pop-up defense fragment –&gt; Brief rundown of countermeasure states, this fragment is automatically overlaid when vehicle detects radar/lidar etc.</li>
  <li>Traffic advisor fragment –&gt; Allows user to control illegal light patterns of vehicle including police and hazard strobes</li>
</ul>

<p>In addition to the two primary fragment containers, a few fragments can be overlaid on top of the whole display in specific circumstances:</p>
<ul>
  <li>Parking fragment –&gt; Overlaid when vehicle is put into reverse by driver and persists until vehicle speeds up regardless of which gear the vehicle is in. This fragment provides data from parking sensors and cameras around vehicle to facilitate parking.</li>
  <li>Merging fragment –&gt; Pops up when merging right, provides live view of traffic in right lane so driver can see all vehicles in adjacent lane and blind spot.</li>
</ul>

<p>Here are screenshots of what the head unit display looks like. I wrote the sofware for his in Android, however the weird display architecture of the head unit combined with the fact that I’m trying to run Android on a Raspberry Pi makes it unusable. Instead of fighting with the kernel to get something to work, I’ve decided to rewrite the page in NodeJS with electron and keep Raspbian running on the Pi. Ideally, this will facilitate fine tuning the behaviour of the Pi as Linux is much more flexible and also allows the Pi to easily interface with the CAN bus or whatever other I/O I may add in the future.</p>

<p><img src="/assets/img/brz/media_display_sample_layout.png" alt="Media Display Sample Layout" />
<img src="/assets/img/brz/media_display_sample_layout_2.png" alt="Media Display Sample Layout" /></p>

<h3 id="diagnostic-display">Diagnostic Display</h3>

<p>This display layout is very much a work in progress because I’m unsure of what functionality I will assign to the display and so I’m unsure as to how to lay things out. I do intend to add touch screen buttons to replace the four physical buttons that used to be below this display (2x seat warmers, sport mode, and traction control).</p>

<p><img src="/assets/img/brz/center_console_layout_sample.png" alt="Center Console Display Sample Layout" /></p>

<h3 id="gauge-cluster-display">Gauge Cluster Display</h3>

<p>I have not begun work on this. I bought a second cluster to modify it into a digital one but I’m focused on other things.</p>

<p>Listens to car’s CANBUS and displays the same information as was available with original gauge cluster though it also adds data for range and displays alerts from vehicle systems. (TRUE?) Furthermore, can be used to display night vision camera in front of vehicle to drive in less than optimal lighting conditions.</p>

<h2 id="interactive-user-interface">Interactive User Interface</h2>

<p>The diagnostic displays is the only one with touchscreen functionality and the head unit display can only be controlled using steering wheel buttons for a handsfree experience. The right side steering wheel buttons are used to control the contents of the big container while the left side steering wheel buttons are used for the small container’s contents. Additionally, there are dedicated buttons or combinations thereof that can always be used to toggle critical functions such as the vehicle’s legal mode regardless of what content is live at the time.</p>]]></content><author><name>Serban Popovici</name></author><summary type="html"><![CDATA[Head Unit Display]]></summary></entry><entry><title type="html">BRZ Steering Wheel</title><link href="http://localhost:4000/brz-steering-wheel/" rel="alternate" type="text/html" title="BRZ Steering Wheel" /><published>2022-10-01T00:00:00-04:00</published><updated>2022-10-01T00:00:00-04:00</updated><id>http://localhost:4000/brz-steering-wheel</id><content type="html" xml:base="http://localhost:4000/brz-steering-wheel/"><![CDATA[<h3 id="steering-wheel-button-integration">Steering Wheel Button Integration</h3>

<p>Steering wheel buttons were added to BRZs in 2017 and mine is a 2013 so I purchased a salvage steering wheel in order to integrate its buttons into my systems. Should anybody else contemplate to do the same, be aware that even though steering wheels are cheap the airbag most certainly is not: a brand new OEM airbag for my car is $CAD 1100 from the dealer while a used one is ~$CAD 700 (I got one of these and it is most likely counterfeit so it may be more of a grenade than it is an airbag - choose wisely).</p>

<p>The steering wheel uses an Arduino Nano to convert button presses into CAN messages that are sent along my CAN network. In order to interface the Arduino with the steering wheel, I took apart the button clusters on each side of the 
<img src="/assets/img/brz/steering_wheel_button_connector.jpg" alt="Steering wheel button connector" style="float: right; width:50%; height:80%; margin-left: 10px;" />
steering wheel and followed traces to figure out the function of each wire. My findings are listed below for anybody else intending to reverse engineer the steering wheel buttons on a BRZ (wires are listed from left to right, top to bottom, looking at the connector from behind as depicted to the right):</p>
<ul>
  <li>Light green –&gt; Volume and arrow keys of left side cluster</li>
  <li>Red –&gt; Common of left side cluster</li>
  <li>Green –&gt; Arrow keys of right side cluster</li>
  <li>Purple –&gt; Enter and back key of right side cluster</li>
  <li>Yellow –&gt; Common of right side cluster</li>
  <li>Black –&gt; Call buttons, source button, left enter button, and voice button</li>
  <li>Blue –&gt; Steering wheel ground</li>
  <li>Brown –&gt; Cruise control pin 1</li>
  <li>Grey –&gt; Cruise control pin 2</li>
  <li>Black + White –&gt; LED ground</li>
  <li>White –&gt; LED VCC (5V works but LEDs are dim. Not sure I’m willing to go higher so I’ll suck it up)</li>
</ul>

<p>The ‘voice’ button on the right side of the steering wheel is wired to the left button cluster and its state is transmitted through the (light green or black) wire. Button states are transmitted by varying the resistance between the common pin of each button cluster and one of the two output pins of each button cluster. The Arduino interprets these using an analog pin using the INPUT_PULLUP pin mode with the common pins being connected to ground. The resulting resistance and output wire for any button press is listed below in hopes of saving someone else the effort required to decode these circuit boards though I ended up using analogRead values in my code so these are useless to me.</p>

<table>
  <thead>
    <tr>
      <th>Left Side Cluster</th>
      <th>Right Side Cluster</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Source –&gt; 115 Ohm BLACK</td>
      <td>Up –&gt; 330 Ohm GREEN</td>
    </tr>
    <tr>
      <td>Call pickup –&gt; 425 Ohm BLACK</td>
      <td>Right –&gt; 3.1 kOhm GREEN</td>
    </tr>
    <tr>
      <td>Call hangup –&gt; 225 Ohm BLACK</td>
      <td>Down –&gt; 1 kOhm GREEN</td>
    </tr>
    <tr>
      <td>Volume up –&gt; short LIGHT GREEN</td>
      <td>Left –&gt; short GREEN</td>
    </tr>
    <tr>
      <td>Volume down –&gt; 50 Ohm LIGHT GREEN</td>
      <td>Enter –&gt; 100 kOhm PURPLE</td>
    </tr>
    <tr>
      <td>Right –&gt; 115 Ohm LIGHT GREEN</td>
      <td>Back –&gt; 101 kOhm PURPLE</td>
    </tr>
    <tr>
      <td>Left –&gt; 245 Ohm LIGHT GREEN</td>
      <td>Voice –&gt; 50 Ohm BLACK</td>
    </tr>
    <tr>
      <td>Enter –&gt; short BLACK</td>
      <td> </td>
    </tr>
  </tbody>
</table>

<p>Taking these findings into account, I connected the yellow and red pins to ground and connected the light green, green, purple, and black wire to analog pins that were set up as INPUT_PULLUPs.
<img src="/assets/img/brz/steering_wheel_computer.jpg" alt="Steering wheel computer" style="float: right; width:50%; height:80%; margin-left: 10px;" />
With this setup the Arduino can mostly distinguish between the buttons however some buttons produce analogRead() values that are very close to each other and are therefore mistaken by the Arduino at times. The Arduino then encodes these button presses into an 8-byte CAN packet that gets sent repeatedly over my CAN network as long as the button remains pressed. I’ve also attached the LED VCC pin to a digital pin so it can be set on by the Arduino whenever another device on the CAN network commands it to do so. The final product, inserted in the steering wheel, is depicted below.</p>

<p><img src="/assets/img/brz/steering_wheel_computer_installed_1.jpg" alt="Steering wheel computer 1" style="float: left; width:50%; height:80%;" />
<img src="/assets/img/brz/steering_wheel_computer_installed_2.jpg" alt="Steering wheel computer 2" style="float: right; width:50%; height:80%;" /></p>

<p>This design worked out really nicely and provides easy access to the Arduino’s USB port so the computer can be reprogrammed at any time. The car’s clockspring had quite a few unused pins so I was able to wire power and CAN through the stock steering wheel connector and retrieve the signals inside. I’ve integrated a 5V regulator into the steering column that provides regulated 5V to the steering wheel computer. This is because I omitted to add it in the 3D-printed bracket that holds the steering wheel computer in place and decided to simply include it in the steering column as opposed to redesigning the bracket slightly and rewiring the steering wheel. I justified this by telling myself that I do not trust the cheap buck regulators I got and I would rather a fire occur in the steering column as opposed to right next to my counterfeit steering wheel airbag.</p>]]></content><author><name>Serban Popovici</name></author><summary type="html"><![CDATA[Steering Wheel Button Integration]]></summary></entry><entry><title type="html">BRZ LightLink</title><link href="http://localhost:4000/brz-light-link/" rel="alternate" type="text/html" title="BRZ LightLink" /><published>2022-10-01T00:00:00-04:00</published><updated>2022-10-01T00:00:00-04:00</updated><id>http://localhost:4000/brz-light-link</id><content type="html" xml:base="http://localhost:4000/brz-light-link/"><![CDATA[<p>UPDATE: I’m nearly done schematics and hope to order this PCB soon. I’m also working on a PCB for the transceiver computer that connects the car’s CAN network to my own and I will finish both before I send off the order.</p>

<h2 id="lightlink-module-overview">LightLink Module Overview</h2>

<p>Control of a vehicle’s external lighting is safety critical, so I’ve settled on designing a fully-redundant custom circuit board with 12 MOSFET-driven channels to handle ‘dumb’ lights and 8 addressable channels to handle a set of addressable LED arrays retrofitted throughout the vehicle.</p>

<p>The primary challenge with designing a redundant board for this application is the required use of P-channel MOSFETs and the limited analog I/O available on the Arduino Mega I am using for control. P-channel MOSFETs are required since the car’s chassis is a system-wide ground that all components always have access to and we must therefore toggle the high side of a circuit to turn it on and off. This is an issue because P-channel MOSFETs need their gates to be driven low in order to turn on but the MOSFET would operate off of the car battery whereas the driving circuit would be operating at a much lower logic-level voltage. Therefore, an intermediary N-channel MOSFET must be used to drive the P-channel from a logic-level signal.</p>

<p>This board has gone through many design iterations with the first being as described <a href="https://circuitjournal.com/how-to-use-a-p-channel-mosfet-with-an-arduino">here</a>. I initially wanted to solely use P-channel MOSFETs to decrease the number of components but this seemed like a bad idea so, in the end, I decided to settle for a more traditional design. The final design includes the intermediary N-channel MOSFETs to drive the P-channels and is described more in depth below.</p>

<h3 id="redundant-mosfet-schematic">Redundant MOSFET Schematic</h3>

<p><img src="/assets/img/brz/mosfet_schematic.PNG" alt="MOSFET schematic" /></p>

<p>Two MOSFETs (top left) are included in parallel, both of which are immediately followed by a Schottky diode to prevent backflow from the other MOSFET. This is necessary because a diagnostic pin is included prior to the Schottky to sense the voltage at the output of each MOSFET which would be biased by backflow from the other MOSFET therefore hindering the detection of a MOSFET failure. The diagnostic connections use LM324D-based comparators to compare the voltage before the Schottky to the voltage following the Schottky. If the voltage prior to the diode falls below the voltage following the diode, the output of the LM324D swings low. This is by design since I am using digital pins for sensing MOSFET failures and digital pins can be set up as inputs with pull-up resistors in the Arduino meaning that the pin should go low when a failure occurs.</p>

<p>In addition to detecting individual MOSFET failures, the circuit includes a shunt at the MOSFET output. This allows the board to detect a short circuit or burnt light bulb based on the current being drawn from the circuit. I am using 4-op-amp ICs for this circuit and have therefore included a voltage follower on the near-side of the shunt since I had the extra op amp. I’m not sure if this makes sense but I wanted to ensure the op amp does not influence the near side of the shunt which may throw off the current sensing.</p>

<p>OVERALL SCHEMATIC</p>

<p>For control, two Arduino Mega EMBEDs are included. These were chosen because I have about a dozen on hand right now and they have been reliable in my experience. At any given moment, one of the Arduinos is considered the ‘master’. The master is in charge of outputting signals to the MOSFET and addressable channels while simoultaneously communicating its state over to the slave Arduino over a UART connection. The master updates the slave at regular intervals such that the updates themselves function as ‘heartbeat’ signals ensuring the slave that the master is operating normally. Should the master miss a heartbeat for whatever reason, the slave sends a hardware reset signal to the master after which it assumes the master role and resumes signal outputs based on the last state update it received.</p>

<p>Each arduino has separate a separate CAN controller and transceiver. I am using the MCP2515 controller alongside the TCAN1043DQ1 transceiver. The MCP2515 is a well known controller and therefore has many libraries available and the TCAN1043DQ1 controller was chosen because it has the ability to ‘wake on CAN’. The TCAN1043DQ1 has a separate power pin that does not require an external regulator and allows it to monitor for activity on the CAN bus. Once activity is detected, it sets the INH pin high which turns on the LightLink. This provides an incredibly low-power solution to ensure this device cannot drain the vehicle’s battery.</p>

<h2 id="light-modifications">Light Modifications</h2>

<p>The LightLink module will be installed under the steering column, next to the car’s body control module which provides it with immediate access to all of the car’s stock lighting wiring. I may have to run some extra wires for things like my brake and running lights since the running lights, for example, probably have a single wire connecting them to the body control module but I want the ability to toggle both independently. The only lights that will remain controlled by the body control module are the third brake light and the headlight highbeams; everything else will be handled by the LightLink module.</p>

<h3 id="license-plate-leds">License Plate LEDs</h3>

<p><img src="/assets/img/brz/license_plate_LED_CAD.png" alt="License Plate LED CAD" style="float: right; width:40%; height:80%;" />
There wasn’t much of a reason to redo these, the light bulbs were perfectly adequate but I figured I might as well add more RGB. These mounts are currently flawed since the LEDs got incredibly hot and managed to melt the ABS so they are currently only partially supported by what’s left of the plastic bracket. The current CAD is pictured to the right. I’m going to fix this by mounting the LEDs onto some sort of metal piece, likely some sheet metal cut to size, such that they can better dissipate the heat the generate. From there, the ABS mount will solely come in contact with the sheet metal and not the LED. I’m hoping this will provide enough insulation to prevent the ABS from melting again.</p>

<h3 id="side-markers">Side Markers</h3>

<p>The following may be useful to other people hoping to get custom side markers for their BRZ. I managed to lose one of mine while driving and it got run over before I had the chance to go retrieve it off the side of the road.
<img src="/assets/img/brz/side_marker_CAD.png" alt="Side marker CAD" style="float: right; width:30%; height:80%;" />
As it turns out, it is in fact cheaper to buy high power addressable RGB LEDs and 3D-print two custom side markers than it is to obtain a single OEM one so I naturally chose that route. The CAD to the right shows the final iteration of the side marker which houses a 9W RGB LED. No space is provided for the LED’s driver board as it will be housed on the inside of the bumper. I’m not sure if this design is functional. I did a similar thing for the license plate LEDs, as explained in the section above, and may redo this design to avoid having the ABS melt. The picture below provides an idea of how the LED would currently fit in the design.</p>

<p><img src="/assets/img/brz/side_marker_LED_test_fit.jpg" alt="Side marker LED test fit" style="width:50%; display:block; margin-left: auto; margin-right: auto;" /></p>

<h3 id="fourth-brake-light">Fourth Brake Light</h3>

<iframe style="float: right; width:20%;" src="/assets/img/brz/fourth_brake_light_video.mp4" frameborder="0" allowfullscreen="allowfullscreen">&nbsp;</iframe>

<p>This was a fun one. The stock fourth brake light only contains two bulbs that turn on when the vehicle is in reverse. The plastic housing of the light quite literally has a spot dedicated to having a light bulb behind the red lens but none is included from the factory. I knew I was going to add a fourth brake light to the car and decided that I might as well add RGB to the two reverse light compartments as well. I don’t seem to have any pictures of the modified fourth brake light though I do have this video where I had programmed it to flash red and blue. The assembly process was rather simple, I cut some holes in the fourth brake light casing with my soldering iron that were just large enough for the portion of the LED that lights up. I then screwed the LEDs into the plastic of the fourth brake light using the two mounting holes they have and lathered the completed thing with high temp hot glue. I’ve had this running for quite a while now and it has yet to fail. Aesthetically, the fourth brake light truly completes the rear end of the car.</p>

<p><img src="/assets/img/brz/fourth_brake_light_rear_end.jpg" alt="BRZ rear" style="width:50%; display:block; margin-left: auto; margin-right: auto;" /></p>]]></content><author><name>Serban Popovici</name></author><summary type="html"><![CDATA[UPDATE: I’m nearly done schematics and hope to order this PCB soon. I’m also working on a PCB for the transceiver computer that connects the car’s CAN network to my own and I will finish both before I send off the order.]]></summary></entry><entry><title type="html">Modernizing my 2013 Subaru BRZ</title><link href="http://localhost:4000/brz/" rel="alternate" type="text/html" title="Modernizing my 2013 Subaru BRZ" /><published>2022-10-01T00:00:00-04:00</published><updated>2022-10-01T00:00:00-04:00</updated><id>http://localhost:4000/brz</id><content type="html" xml:base="http://localhost:4000/brz/"><![CDATA[<h1 id="update">UPDATE</h1>
<p>This page is very much under construction, with the nice weather finally here I have begun work on the car and certain things will change/be populated as I get to them. I apologize for the organizational mess that is this page.</p>

<p>I recently acquired a car for recreational purposes since I had saved up a decent amount of money and didn’t feel like investing it. 
<img src="/assets/img/brz/damn.jpg" alt="Hot damn" style="float: right; width:50%; height:80%;" />
I purchased a BRZ because they are built in conjunction with Toyota and this should theoretically imply that they are reliable and won’t need much mechanical maintenance. Furthermore, the BRZ’s interior is driver-centered while maintaining a relatively simple geometry that should facilitate the design of custom dash components to fit my upgraded electronics.</p>

<p>This project began as a way to disguise speed enforcement countermeasures within the car’s UI seeing as radar/lidar countermeasures are illegal in Ontario. As such, I figured that the best way to hide illegal features would be to program the UI entirely. Seeing as the current head unit is only capable of playing Bluetooth audio, it’s very unlikely that anything I do will result in less overall functionality so I see no downside to this project.</p>

<p>A lot of work has gone into the project so I have split up this post to include a variety of sub-pages detailing individual subsystems in greater detail. This page serves to provide a general overview of the project and a set of links to sub-pages is included below. I’d recommend to read this page first to have an idea of what my goals are before diving into specific sub-systems.</p>
<ul>
  <li><a href="/brz-head-unit">Head Unit</a></li>
  <li><a href="/brz-light-link">Lighting System</a></li>
  <li><a href="/brz-vision-system">Vision System</a></li>
  <li><a href="/brz-wiring">Wiring</a></li>
  <li><a href="/brz-steering-wheel">Steering Wheel</a></li>
  <li><a href="/brz-user-interface">User Interface (Software)</a></li>
  <li><a href="/brz-gallery">Gallery</a></li>
</ul>

<h1 id="idea">Idea</h1>

<h2 id="ui-enhancements">UI Enhancements</h2>

<p><img src="/assets/img/brz/planned_display_layout.jpg" alt="Picture of plan" style="float: right; width:50%; height:80%; margin-left: 10px;" /></p>

<p>The plan is to replace the head unit of the BRZ with a <a href="https://www.aliexpress.com/item/1005004988939115.html">12.7” touch-screen</a>, replace the small button cluster on the center console with a <a href="https://www.aliexpress.com/item/4000393713339.html">7” touch screen</a>, and convert the analog gauge cluster to a display. The 12.3” display will be used for most vehicle functionality such as navigation and media whereas the 7” display will provide diagnostic information about the vehicle as well as any subsystems I add.</p>

<p>This has been completed (minus digitizing the gauge cluster), the picture below is from a debugging session with a friend of mine.
<img src="/assets/img/brz/finalized_display_layout.jpg" alt="Picture of actual layout" /></p>

<h2 id="convenience-upgrades">Convenience Upgrades</h2>

<p>The car will have an LTE modem in it to provide WiFi connectivity for passengers and allow its internal computers to access Google Maps, media streaming services, and other resources such as the Waze database to protect against police encounters. Finally, I hope to add cameras all around the car and experiment with computer vision though, aside from collision warnings and enhanced cruise control I’m not sure what I’ll be able to code. The cameras will however provide a 360-degree dash cam and I will be able to use them for a Tesla-like sentry mode when the car is locked. Furthermore, it may be interesting to experiment with augmented reality headsets in the future to provide the driver with enhanced situational awareness, but this is not in the works as of this writing.</p>

<p>In order to improve the driver’s situational awareness, I’ve elected to replace the two fog lights of the car with thermal and low light high zoom cameras, respectively. The thermal camera will provide the driver with warnings about heat signatures detected ahead whereas the low light camera does not serve much of a practical purpose and was included because I had it laying around. Finally, I’m hoping to integrate blind spot detection radars and cruise control radars out of scrapped vehicles to provide additional peace of mind when merging lanes.</p>

<h2 id="speed-enforcement-countermeasures">Speed Enforcement Countermeasures</h2>

<p>I’m hoping to, at the very least, add passive sensors for radar/lidar and aircraft but I may not be able to add active countermeasures such as radar/lidar jamming. Based on some brief research, there is a significant risk that a radar/lidar device would detect my jamming attempts seeing as many of them have jamming detection built in. Proper commercial jammers are designed to identify the specific make/model of a lidar gun and behave accordingly however they are rather cost-prohibitive so I may not be able to reasonably source a commercial system.</p>

<p>Aircraft countermeasures are more achievable since aircraft speed detection works using lines painted on the pavement at a known distance interval such that an aircraft flying above can time a vehicle crossing a set of these lines. My plan for countering this is to use a front facing camera on the car to pick up the lines at which point an onboard computer will use a software defined radio to look for any aircraft transponders within a certain radius of the vehicle. Should there be an aircraft nearby, the onboard computer will begin calling out speeds for the user to match in hopes that the average speed across the two lines does not exceed the posted limit.</p>

<p>An even more complex countermeasure I’m hoping to integrate is cellular sniffing where a computer would once again use a software defined radio to look for nearby cellular devices and fingerprint them to single out the specific make and model of cellular modem present in a Ford Interceptor. I’m unsure if this is even theoretically possible since newer cellular devices may encrypt everything including metadata but I intend to research this in depth.</p>

<p>In addition to passive countermeasures and radar/lidar jammers, the vehicle will hopefully have cellular and VHF/UHF jammers. The purpose of these is to prevent a Ford Interceptor’s cellular modem and radio from working when in close proximity to the BRZ meaning that the officer will <em>hopefully</em> be unable to run driver’s licenses or issue tickets.</p>

<h1 id="build">Build</h1>

<h2 id="functional-diagram">Functional Diagram</h2>

<p><img src="/assets/img/brz/functional_diagram.png" alt="BRZ Functional Diagram" /></p>

<p>The diagram above displays the overall hierarchy of devices integrated in the car. Red boxes are video capture devices, green boxes are computers, blue boxes are displays, and purple devices are CAN bus devices. I have elected to create a second CAN bus for my devices and use the “Transceiver node” to forward relevant CAN bus data to my private bus. This is to prevent the risk of conflicting IDs and eliminate the possibility of damaging the vehicle should any of my custom devices malfunction and, for example, short circuit the CAN bus lines. A brief description of each device alongside its functionality is included in the section below.</p>

<h2 id="hardware">Hardware</h2>

<h3 id="computers">Computers</h3>

<p>The UI of the car is handled by two primary computers (a Raspberry Pi 4B and a <a href="https://www.khadas.com/vim4">Khadas VIM4</a>) whereas the hardware modifications are handled by a variety of other Arduinos integrated throughout the vehicle. All the computers denoted by green boxes in the diagram above connect through ethernet and have internet access.</p>

<p>The “Android computer” is a Raspberry Pi 4B running Android that controls the head unit and center console displays which function in tandem to deliver the interactive component of the vehicle’s UI whereas the VIM4 runs Linux and does most of the heavy lifting. The Android computer does not handle any logic and interacts with the VIM4 using a series of web services. The VIM4 handles a variety of tasks including Bluetooth media playback, camera feed management, and CANBUS communication. More information can be found <a href="/brz-VIM4">here</a>.</p>

<p>The “Vision computer” is meant to be an nVidia Jetson however those are too expensive for me at the moment so it is substituted with a second Raspberry Pi 4B running Linux. Finally, the SDR computer has not been set in stone at the moment but any modestly powerful SBC will be adequate as its sole purpose is to interact with a few RTL-SDR modules to listen for ADS-B, cellular, and possibly audio communications over radio.</p>

<h3 id="secondary-can-bus">Secondary CAN Bus</h3>

<p>Most of the hardware modifications are executed by Arduinos integrated throughout the vehicle that share a CAN bus. The list of integrated Arduinos as well as other CAN bus devices is as follows:</p>

<ul>
  <li>Blind spot radars –&gt; Will use some second hand eBay or junkyard radars from another car.</li>
  <li>Steering wheel button manager (NANO) –&gt; Converts steering wheel button presses into CAN messages for head unit.</li>
  <li>Center console button manager (NANO) –&gt; Controls MOSFETs that simulate button presses to maintain functionality of old center console buttons.</li>
  <li>Front-facing radar –&gt; Will use a second hand eBay or junkyard radar from another car.</li>
  <li>Ceiling switches –&gt; I would like to install a fancy ceiling switch panel in the car but this is a future project.</li>
  <li>Mirror manager (NANO) –&gt; Keeps track of mirror position and allows them to automatically tilt when backing up. One per mirror.</li>
  <li>Low light camera controller –&gt; Translates CAN messages into PWM signals to actuate the camera’s gimbal.</li>
  <li>Thermal camera controller –&gt; Translates CAN messages into a PWM pitch value to adjust the camera’s pitch.</li>
  <li>LightLink (2xMEGA_EMBED) –&gt; Used to control most exterior vehicle lights, more info <a href="/brz-light-link">here</a>.</li>
  <li>Rear defence controller –&gt; In charge of managing jammers in the rear of the vehicle.</li>
  <li>Uniden R9 –&gt; Reverse engineered CAN interface for the Uniden R9 system (not released at the time of this writing but am hoping to get one when they come out).</li>
  <li>Transceiver node –&gt; Forwards CAN data from vehicle’s CAN bus to my CAN bus. More info <a href="/brz-CAN">here</a>.</li>
</ul>

<h3 id="cameras">Cameras</h3>

<p>The planned camera layout is included below. The green semicircles are <a href="https://www.aliexpress.com/item/1005004337827464.html">136-degree FOV cameras</a> installed in the front windshield and above the rear license plate whereas the gray circles represent <a href="https://www.aliexpress.com/item/1005004335144138.html">210-degree cameras</a> (the listing says 180 degrees but they are actually 210) installed beneath the side view mirrors of the car (PIC). I planned on including a second front-facing camera on the right wing mirror to provide the driver with insight about any vehicles in the right lane ahead of the car however this camera is not included at this time since the 210-degree FOV camera installed beneath the mirror should theoretically capture all vehicles in the right lane.</p>

<p><img src="/assets/img/brz/camera_layout.png" alt="Camera layout" /></p>

<p>Beyond the cameras used for 360 degree coverage, both fog lights of the vehicle contain camera modules with the driver side being a thermal camera and the passenger side being a Sony Starvis low light camera with optical zoom. These are meant to be used in conjunction with AI to detect threats on the road ahead as well as to provide increased visibility in low light conditions. Of these two, the thermal camera uses a RCA to HDMI adapter to interface with the Khadas VIM4’s HDMI input and the low light camera simply outputs to ethernet and shares the vehicle’s ethernet network. A final camera is installed inside the vehicle and faces the driver for eye tracking such that the touch screen functionality of the center console display is disabled unless the driver is looking at the display to prevent accidental inputs (might not be included after all, depends on whether accidental input truly is an issue).</p>

<h2 id="software">Software</h2>

<p>I initially intended to build a custom image of Android Automotive for the BRZ and develop mobile applications that would mostly run as background services and overlay themselves on top of Android to display relevant information. Unfortunately this turned out to be a rather lucrative task and as of this writing I have elected to build a simple Android application running on a mobile image. The advantages of Android Automotive are as follows:</p>
<ul>
  <li>Better navigation with fully functional Google Maps (Android applications cannot have integrated navigation activities and can only display 2D maps as far as I am aware)</li>
  <li>Better media controls with proper Bluetooth integration (the Android Mobile OS cannot be used as a A2DP sink without modifying the source code)</li>
  <li>Better boot times</li>
</ul>

<p>Overall, I did not feel these advantages were enough to justify the increased complexity of building a custom Android Automotive image especially considering how many custom UI screens and functions I intend to incorporate as well as my lack of affinity for hardware-level programming.</p>

<p>The purpose of rebuilding the vehicle’s UI is not only to provide a seamless means of interacting with the additional functionality but also to fully hide any illegal functions on demand. As such, a ‘legal mode’ will be integrated in the software which will be activated on boot and will hide all illegal functionality from the vehicle’s UI. The driver can disable legal mode using an arbitrary set of seemingly random keystrokes using buttons throughout the car’s interior which will be intricate such that they cannot be haphazardly entered.</p>]]></content><author><name>Serban Popovici</name></author><summary type="html"><![CDATA[UPDATE This page is very much under construction, with the nice weather finally here I have begun work on the car and certain things will change/be populated as I get to them. I apologize for the organizational mess that is this page.]]></summary></entry><entry><title type="html">BRZ CAN</title><link href="http://localhost:4000/brz-CAN/" rel="alternate" type="text/html" title="BRZ CAN" /><published>2022-10-01T00:00:00-04:00</published><updated>2022-10-01T00:00:00-04:00</updated><id>http://localhost:4000/brz-CAN</id><content type="html" xml:base="http://localhost:4000/brz-CAN/"><![CDATA[]]></content><author><name>Serban Popovici</name></author><summary type="html"><![CDATA[]]></summary></entry></feed>