<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-10-11T19:09:16-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Ludicrous Tech</title><subtitle>This website keeps track of whichever projects I am most proud of and serves to share some of the knowledge I accumulate from tinkering on whatever comes to my mind. Enjoy!</subtitle><author><name>Serban Popovici</name></author><entry><title type="html">HYDRA: Modular Avionics</title><link href="http://localhost:4000/hydra/" rel="alternate" type="text/html" title="HYDRA: Modular Avionics" /><published>2023-05-01T00:00:00-04:00</published><updated>2023-05-01T00:00:00-04:00</updated><id>http://localhost:4000/hydra</id><content type="html" xml:base="http://localhost:4000/hydra/"><![CDATA[<p>This page briefly summarizes the extensive amount of work that went into designing the avionics system for the University of Ottawa’s rocketry team. We unfortunately had to scrap last year’s work since it was very unorganized and we had absolutely no documentation to work off of. For this project, I was given the requirement that the system be modular, incrimentally upgradeable, and above all well documented. Fortunately, I am a fan of documentation and have included the two primary documents that describe the system below. This blog post will gloss over the design of these boards, however in-depth information is available in the documents below. I would also like to add that this was my first project involving PCB design, hence the very poor design of the V1 boards depicted below.</p>

<ul>
  <li><a href="/assets/img/hydra/hydra_framework.docx">Hydra Framework</a> –&gt; this document describes the general features that are to be included in each version of Hydra as well as system-wide specifications that must be respected by all Hydra PCBs.</li>
  <li><a href="/assets/img/hydra/hydra_hardware.docx">Hydra Hardware</a> –&gt; this document describes board-specific decisions for each PCB within the hardware ecosystem.</li>
</ul>

<h2 id="design">Design</h2>

<h3 id="hydra-v1--v2">Hydra V1 &amp; V2</h3>

<p>As previously mentioned, the key focus of this system is modularity. Modularity and redundancy go hand-in-hand in my head so I figured I’d tack that on there as a design requirement. Based on these two requirements, the obvious answer to me was to produce stackable boards that share power buses and communicate through a protocol that can accomodate a flexible amount of hosts without needing rewiring, such as CAN. Seeing as we’re building a rocket, the boards should be circular to maximize the area available within the airframe’s cross section. Finally, I consulted with the airframe team to establish the position of the mounting holes for the PCBs. From here, we ended up with a finalized set of requirements for each PCB:</p>

<ul>
  <li>140mm in diameter (slightly smaller than the 6 inch diameter of the body tube)</li>
  <li>3 equally-spaced 5.3mm mounting holes (120 degrees apart) in a 60mm radius with the first being located at the top of each PCB (directly above the center)</li>
  <li>2 standardized connectors on each side of the PCB (2 included for stability, we only really need one)</li>
</ul>

<p><img src="/assets/img/hydra/hydra_PCB_layout.png" alt="Hydra V1/V2 PCB layout" style="width:60%; display:block; margin-left: auto; margin-right: auto;" /></p>

<p>The pinout for each connector was then defined as follows:</p>

<p><img src="/assets/img/hydra/hydra_header_pinout.png" alt="Hydra header pinout" style="width:80%; display:block; margin-left: auto; margin-right: auto;" /></p>

<p>The left header is the main one used by the system. It provides battery power, regulated 5V, and regulated 3V3 to all the PCBs as well as shared CAN, UART, SPI, and I2C buses. SPI and I2C were included in case we wanted to make any last minute sensor additions or establish a high speed SPI datalink between specific PCBs. UART was included for Hydra V1, to communicate directly with our telemetry radio (an RFD900). In the future, the SPI, I2C, and UART interfaces may be eliminated as they likely won’t be particularly useful but we’ve kept them so far because we have no idea what to replace them with.</p>

<h3 id="hydra-v3">Hydra V3</h3>

<p>Due to my Master’s beginning in January, I had the opportunity to continue working with the uOttawa rocketry team for a semester following the Launch Canada 2023 competition to continue developing this modular avionics system. The goal for my final semester is to iron out some bugs of the system, upgrade the boards from the current ATSAME51J18A MCU to the STM32H733VGT6, and shrink the system from 140mm in diameter to 50mm in diameter. The new PCB format for Hydra V3 PCBs is as follows:</p>

<p><img src="/assets/img/hydra/hydra_V3_PCB_layout.png" alt="Hydra V3 PCB layout" style="width:60%; display:block; margin-left: auto; margin-right: auto;" /></p>

<p>Beyond the changes outlined above, Hydra V3 will also shift towards more aerospace-grade hardware such as more resilient connectors and arming system; these changes are outlined in the Hydra-Framework document linked above. The new connector pinout for Hydra V3 is as follows:</p>

<p><img src="/assets/img/hydra/hydra_V3_header_pinout.png" alt="Hydra header pinout" style="width:80%; display:block; margin-left: auto; margin-right: auto;" /></p>

<p>This pinout drops a lot of the data protocols included in the V1/V2 pinout since the system requirements are clearer now and there is no need to include exposed I2C, SPI, or UART interfaces for last minute hardware changes. Moreover, the new pinout focuses on power capacity over data and now includes two CAN buses: one for commands and another for sensor data. The software team had issues with sending commands within the V2 system because the CAN messages representing commands would get drowned in sensor data and V3 will therefore segregate sensor and command data in two separate CAN buses. This also provides the system with redundant CAN buses :)</p>

<p>Lastly, the right header of the Hydra V3 system is dedicated to power transport and has been made into a large avionics-wide power bus. This change compliments the HYDRA_V3_POWER board design which is detailed farther along in this post.</p>

<h3 id="sbg-systems">SBG Systems</h3>

<p>This system was designed around the <a href="https://www.sbg-systems.com/products/ellipse-series/">SBG Systems Ellipse2-N INS</a> (Inertial Navigation System) which was 
<img src="/assets/img/hydra/sbg.jpg" alt="SBG" style="float: right; width:40%; height:100%;" />
generously sponsored to us by SBG Systems. This sensor contains an IMU, barometer, magnetometer, and GPS alongside an MCU running a Kalman filter to ensure accurate data is being sent out of the sensor. From here on out, the Ellipse2-N will be referred to as ‘the SBG’.</p>

<h2 id="hydra-v1">Hydra V1</h2>

<p>The first version of the system was rushed so that we could have a functional system and prove to <a href="http://www.launchcanada.org/">Launch Canada</a> that we had a functional avionics system. This system consisted of a simple power board, with two regulators and no other functionality, and a logic board. The logic board was our first PCB containing an MCU and so its purpose was to test whether or not the circuitry surrounding the MCU was done properly. In this version, the MCU simply reads data from the SBG, writes it to the SD card onboard the logic board, and sends an update of the rocket’s state over telemetry four times a second.</p>

<h3 id="hydra_v1_logic">HYDRA_V1_LOGIC</h3>

<p><img src="/assets/img/hydra/hydra_v1_logic.png" alt="Hydra V1 logic" style="width:80%; display:block; margin-left: auto; margin-right: auto;" /></p>

<p>These were my first ever PCBs and I am not awfully proud of them given how messy and poor the design was but everybody’s gotta start somewhere I guess. The main purpose of these PCBs was to test if the MCU circuitry was ok and whether our circuitry to interface with the SD card, SBG, and telemetry radio was functional. The only thing that didn’t work on this logic board was the programming interface; I did not double check my work and managed to offset the programming pins on the MCU by two so we could not program the MCU. Luckily the firmware was written in Rust so a successful compilation most likely means everything will work. This was a beautiful thing because we ended up getting the board running by programming an MCU on a development board and then transplanting it to the logic board.</p>

<h3 id="hydra_v1_power">HYDRA_V1_POWER</h3>

<p><img src="/assets/img/hydra/hydra_v1_power.png" alt="Hydra V1 power" style="width:80%; display:block; margin-left: auto; margin-right: auto;" /></p>

<p>The power board is a truly ugly thing but it worked, and it worked well. I ran 10A in a lab through the thinnest traces I could find and it did not even get hot. The purpose of this test was to see if we would need to upgrade to 2oz PCBs but the results confirmed that 1oz boards are fine. On a final note, this board only had reverse polarity protection and was therefore rather lacking in the power protection department. This was fixed in V2.</p>

<h2 id="hydra-v2">Hydra V2</h2>

<p>This is where things got interesting. We ordered an intermediary set of test boards, pictured below, to test the MCU schematics again this time with the programming pins wired where they should be. These boards also allowed us to test CAN between multiple boards which we had not been able to test with the V1 logic board seeing as we couldn’t actively debug it. The header on the right side of the PCB (P1) serves to provide power to the board, expose a SERCOM interface on the MCU (allows us to communicate with the chip using a serial protocol such as UART, SPI, etc), and was used to test how much noise a trace would pick up from being close to a crystal (Y1). The trace connected to the bottom right pin of the header follows the outline of Y1 very closely to pick up as much noise as possible.</p>

<p><img src="/assets/img/hydra/hydra_mcu_test_board.png" alt="MCU test board" style="width:60%; display:block; margin-left: auto; margin-right: auto;" /></p>

<p>Having confirmed the MCU schematic, we then proceeded to order the V2 boards. It was very important to confirm the MCU layout because each V2 board has an MCU onboard and we must be able to interface with them all. Lastly, I’d like to add that I did not do all of the PCBs listed below; I did all the work for the V2 power board, the layout for the V2 logic board (basically the same thing as V1 but better-looking), modified the layout of the communication board to make it look more like the others, and did the recovery board. I was not supposed to do the recovery board, but the team member responsible for it was unable to complete it and so I took over last minute and threw something together.</p>

<h3 id="hydra_v2_power">HYDRA_V2_POWER</h3>

<p><img src="/assets/img/hydra/hydra_v2_power.png" alt="Hydra V2 power" style="width:80%; display:block; margin-left: auto; margin-right: auto;" /></p>

<p>This is the board I focused on and the only one I’d consider worthy of the Hydra name. This PCB provides redundant 5V and 3V3 rails to the avionics stack, can turn off any specific regulator individually or even cut avionics power outright, and contains a wealth of protections such as over-current, over-voltage, over-discharge (software-based), thermal cut-off (software- and hardware-based), and reverse polarity. Additionally, the board has a variety of voltage sensors throughout, current sensing at the input, and thermal sensors on each regulator. The MCU of this board is powered by its own internal regulators such that it remains online even if the over-current protection trips and can therefore notify the ground station of the failure and reset the current latch. The empty space left near the top mounting hole and on the bottom right, around the ground power switch logic section, is to accomodate 3D-printed pieces that will help guide the safety rod which interacts with the two safety switches on the PCB. This rod passes through the airframe and is inserted to cut power to the avionics prior to flight. Two power switches are included to combine their current capacity and also for redundancy.</p>

<p>Below are a couple system diagrams of the V2 power board.</p>

<p><img src="/assets/img/hydra/hydra_v2_power_parent_system_diagram.png" alt="Hydra V2 power parent system diagram" style="width:100%; display:block; margin-left: auto; margin-right: auto;" /></p>

<p>Power can come in through either one of two connectors: the battery connector or the ground power connector. Ground power is not used in this year’s rocket but was included regardless to test the circuitry for future designs. This connector would allow the avionics to power themselves from a power source external to the rocket while the rocket is sitting on the launch pad in order to avoid draining the battery. Once we pass the ground power switch, there is a safety switch stage. These are mechanical switches that interact with a rod protruding through the airframe; when the rod is inserted, the power board is turned off. These switches are positioned sideways to decrease their vertical profile but also to prevent them from accidentally actuating in a high-acceleration event. Past the safety switches, we enter the power protection stage. At this stage, the power first goes through reverse polarity protection after which it diverges into two channels: one goes through the remaining protection circuits and another provides an internal power rail. This internal rail is always active regardless of whether the over-current or over-voltage protection has tripped and is therefore intended for use by the internal regulators that power the MCU. Additionally, this always-on power rail has its own fuse and is used to ignite the pyrotechnics inside the rocket. Doing so alleviates the risk of the over-current latch accidentally tripping due to the sudden change in current required by the pyrotechnic igniters. I’d also like to add that the reverse polarity protection was kept for the pyrotechnics rail to prevent the igniters going off during a reverse polarity event, as the body diode of the MOSFETs that drive the ignitors (on the recovery board) would conduct in a reverse polarity event.</p>

<p><img src="/assets/img/hydra/hydra_v2_power_regulator_system_diagram.png" alt="Hydra V2 power redundant regulator system diagram" style="width:80%; display:block; margin-left: auto; margin-right: auto;" /></p>

<p>Once we’re through the power protection stage, the power now reaches the main regulators of the power board. The 3V3 and 5V regulator schematics are virtually identical so I will focus on a single regulator stage, pictured above. There are two regulators that each pass through a separate MOSFET stage before reaching the power rail. The MOSFETs are driven by <em>PART NUM</em> load-sharing ICs. These sense the voltage immediately prior to the MOSFET stage as well as the voltage immediately following the MOSFET stage. They then regulate how excited the MOSFET stage is which is correlated to how much resistance the MOSFET stage adds between the regulator and the rail. In this manner, the IC can ensure that the voltage of both regulators immediately following the MOSFET stage is equal and they can therefore equally share the load they are supplying.</p>

<h4 id="power-protection-in-depth">Power protection (in depth)</h4>

<p>This was my first time designing proper power protection circuitry and I’m rather fond of how it turned out. A system diagram of the power protection schematic is included below.</p>

<p><img src="/assets/img/hydra/hydra_v2_power_protection_system_diagram.png" alt="Hydra V2 power protection system diagram" style="width:100%; display:block; margin-left: auto; margin-right: auto;" /></p>

<p>The power first goes through a main fuse before reaching the reverse polarity protection. This parent fuse should be virtually impossible to blow as the pyrotechnics fuse and over-current latch should prevent the board from ever drawing enough current to blow the main fuse. The internal power rail, used to power the board’s internal regulators as well as the pyrotechnics power bus, immediately follows the reverse polarity protection stage. The remaining current flows into the over-current latch which was taken from a <a href="https://www.ti.com/lit/ml/snoaa39/snoaa39.pdf?ts=1680252597482">TI paper</a> decribing op-amp-based over-current protection. Having passed through the over-current latch, the power is then able to reach the regulators.</p>

<p><img src="/assets/img/hydra/mosfet_reverse_polarity_protection.webp" alt="Reverse polarity protection schematic" style="float: right; width:40%; height:100%;" /></p>

<p>The reverse polarity protection follows a relatively standard configuration involving a P-channel MOSFET, zener, and a current-limiting resistor, as pictured to the right. This protection works because the MOSFET’s gate is tied to ground through the current-limiting resistor; in normal operating conditions, this means that the MOSFET will be turned on. During a reverse polarity event, ground becomes positive and the gate of the MOSFET loses its negative bias meaning that the MOSFET will no longer conduct. Furthermore, the body diode of the MOSFET only allows current to flow in the right direction and the zener is used to ensure that the gate-source voltage never exceeds the maximum voltage that the MOSFET is rated for.</p>

<p><img src="/assets/img/hydra/over_current_protection_schematic.png" alt="Over-current protection schematic" style="float: right; width:40%; height:100%;" /></p>

<p>The over-current protection is a rather beautiful and yet simple circuit. It essentially works by using a precise voltage divider (R2/R3) to set the voltage at the non-inverting input (Vp) of the op amp to represent the maximum allowable voltage drop across the shunt (R1). Normally, Vp will be lower than the post-shunt voltage (Vn) and the op-amp’s output will therefore be low. The low output pulls the gate of the P-channel MOSFET (T1) low, thereby allowing current to flow into the load. During an over-current event, Vn drops below Vp allowing the output of the op amp to swing high. This not only cuts off the MOSFET but it also sets the bottom of the R2/R3 voltage divider high. Considering that no current will be flowing through the shunt if the MOSFET is cut off, this means that Vp ~ Vn and the op-amp will latch in its hysteresis region. Ona  final note, the capacitor C1 is included to pull Vp low and prevent the system from accidentally tripping on boot.</p>

<p>I’ve modified this circuit in three ways:</p>

<ol>
  <li>I’ve added the ability to artificially trip the current latch by using an N-channel MOSFET and resistor in series which will pull Vn to ground using a logic-level input.</li>
  <li>I’ve added the ability to reset the current latch with an identical N-channel MOSFET and resistor circuit pulling the comparator’s output low. This forcefully turns on the MOSFET and re-establishes the correct voltage output from the R2/R3 divider thereby resetting the circuit.</li>
  <li>I’ve added current sensing off of the same shunt (R1). I’m not sure if this is a good idea but we’re gonna find out :) It’s not a mission critical item so we can easily just omit it on the final PCB. The current sense circuitry uses a dedicated shunt IC; I had initially made my own instrumentation amplifier but decided it was probably best to use a dedicated IC to save PCB area and design complexity.</li>
</ol>

<p>Two voltage sensing circuits are included prior to the over-current
<img src="/assets/img/hydra/voltage_sense_schematic.png" alt="Voltage sense schematic" style="float: right; width:40%; height:100%;" />
latch: one providing sensing data to the MCU, and another for over-voltage protection. 
The MCU sensing circuit (pictured to the right) uses a simple voltage divider with a Zener diode to prevent the voltage at the MCU from ever exceeding 3.3V given that it senses voltage prior to the over-voltage protection.</p>

<p>The over-voltage protection is concatenated with the over-current latch in that it uses a comparator to produce a logic high signal when an over-voltage condition occurs. This logic high signal is then used to artificially trip the current latch using an N-channel MOSFET and resistor in series. It uses the exact same circuit as previously described in the list describing features I’ve added to the over-current latch. The over-voltage protection depicted below works by comparing the output of the MCU’s voltage sense divider (picture above) to a predetermined reference. R29 and D4 produce a 3.3V reference which is then passed through a voltage divider (R30/R31) whose resistors we can tune in a lab to output a value representative of the maximum allowable voltage for the PCB. If the MCU’s voltage sense divider ever outputs a value above our maximum allowable voltage, the output of U4 swings high and forces the over-current latch to trip thereby curring power to the board.</p>

<p><img src="/assets/img/hydra/over_voltage_protection_schematic.png" alt="Over-voltage protection schematic" style="width:100%; display:block; margin-left: auto; margin-right: auto;" /></p>

<h3 id="hydra_v2_logic">HYDRA_V2_LOGIC</h3>

<p><img src="/assets/img/hydra/hydra_v2_logic.png" alt="Hydra V2 logic" style="width:80%; display:block; margin-left: auto; margin-right: auto;" /></p>

<p>This is definitely the prettiest one of the lot. It’s an awfully simple board and its schematic is identical to that of the V1 logic board, however we added some MOSFETs to cut off power to the SBG and fixed the programming header/swapped it out for a different one. The MOSFETs were included to help put the board to sleep since the SBG consumes more current than the remaining avionics combined. The programming header was swapped with one that matches our debugger (the Segger J-Link EDU Mini) so that these boards can be plug and play to debug. The pinout was also fixed and made to match the Segger’s I/O header.</p>

<h3 id="hydra_v3_communication">HYDRA_V3_COMMUNICATION</h3>

<p><img src="/assets/img/hydra/hydra_v3_communication.png" alt="Hydra V3 communication" style="width:80%; display:block; margin-left: auto; margin-right: auto;" /></p>

<p>This board is labelled V3 since we effectively fast-tracked to the feature set we planned for Hydra V3. Hydra V1 and V2 were meant to have the logic board interface directly with the RFD900 through the UART bus on the left header of the PCB. I felt it was a waste of money to order a PCB this size with 4 traces (power and data for the RFD900) so we designed the V3 board and ordered it instead. That being said, there are still some traces with pads that can be soldered across to connect the RFD900’s UART directly to the left header. Our software team is confident they can program this board on time so these likely won’t get used; instead, the RFD900 will interface with an MCU on the communication board which enables it to interact directly with the avionics CAN bus. This is much better design since our telemetry no longer depends on the availability of the logic board and we can communicate with each PCB within the system directly. Additionally, the MCU on the communication board has very little to do thereby mitigating the risk of it getting overloaded and alleviating the logic board of a task.</p>

<p>An interesting last-minute addition made to this board is the use of internal regulators. These regulators leech off of the pyrotechnics power bus on the right header of the PCB. The pyrotechnics bus is always on, regardless of whether the current latch on the power board has tripped which enables us to maintain telemetry with he avionics system even if the power protection cuts off power to the rest of the avionics. This was done primarily to allow the power board to put the avionics to sleep while the rocket is sitting on the launch pad. Sleep mode was initially meant to be a software concern but I figured there was no reason to give them more work when we have a power board that is perfectly capable of cutting power to the avionics using hardware. It is also important to note that the communication board has a failover circuit that allows it to fail over to the avionics power buses on the left header of the PCB if its internal regulators fail.</p>

<h3 id="hydra_v2_recovery">HYDRA_V2_RECOVERY</h3>

<p><img src="/assets/img/hydra/hydra_v2_recovery.png" alt="Hydra V2 recovery" style="width:80%; display:block; margin-left: auto; margin-right: auto;" /></p>

<p>This board has its fair share of issues and I will likely redesign it prior to competition. Its main purpose is to ignite pyrotechnics using e-matches to deploy the parachutes of the rocket. In addition to this, we decided to include a backup sensor package that allows the recovery board to act independently even if the logic board goes offline. The logic behind this likely won’t be implemented in time for competition this year since we’d ideally need three sensor packages to be able to discriminate between them and positively identify if one of them is an outlier.</p>

<p>The rectangular shape to the left is a mounting point for a <a href="https://www.apogeerockets.com/Electronics-Payloads/Altimeters/RRC3-Sport-Altimeter">RRC3</a> which acts as our redundant deployment system.</p>

<h3 id="system-comparison-v2-vs-v1">System Comparison: V2 vs V1</h3>

<p>The top two pictures show Hydra V1 which solely had a logic board and used two consumer <a href="https://www.apogeerockets.com/Electronics-Payloads/Altimeters/RRC3-Sport-Altimeter">RRC3</a> recovery systems in parallel as opposed to our custom recovery board used by V2. The bottom pictures shows the final Hydra V2 stack prior to launch.</p>

<p><img src="/assets/img/hydra/hydra_v1_sbg.jpg" alt="Hydra V1 logic board with SBG" style="float: left; width:50%; height:80%;" />
<img src="/assets/img/hydra/hydra_v1_stacked.jpg" alt="Hydra V1 stacked" style="float: right; width:50%; height:80%;" />
<img src="/assets/img/hydra/hydra_v2_stacked.jpg" alt="Hydra V2 stacked" /></p>

<p>In practice, this system performed admirably. Thanks to contributions from the software team, we had an extensive ground station suite that logged thousands of data points during the rockets flight enabling us to recover the vehicle in no time. Furthermore, the onboard SD card of the V2 logic board logged over 6 million data points with regards to the rocket’s state during its 30 minute flight enabling us to further gain insight into the airframe’s behaviour.</p>

<h2 id="hydra-v3-1">Hydra V3</h2>

<p>This system is still currently in its inception so most PCBs don’t exist yet. I’ve currently created a template PCB containing barebones circuitry common to all Hydra V3 PCBs. This project still uses the old ATSAME51J18A MCU such that we can work on developing the MCU circuitry for the STM32H733VGT6 MCU in parallel with the first round of avionics boards. Once the STM32H733VGT6 MCU circuitry is completed, it should be easy to replace the MCU and reorder Hydra V3 PCBs with the upgraded processor.</p>

<h3 id="hydra_v3_same51_template">HYDRA_V3_SAME51_TEMPLATE</h3>

<p><img src="/assets/img/hydra/hydra_V3_SAME51_template.png" alt="Hydra V3 SAME51 template" style="width:80%; display:block; margin-left: auto; margin-right: auto;" /></p>

<p>This is the aforementioned template project that has some sample connectors and status LEDs since the position of such features has been standardized in V3 as per the Hydra Framework document linked at the top of this page.</p>]]></content><author><name>Serban Popovici</name></author><summary type="html"><![CDATA[This page briefly summarizes the extensive amount of work that went into designing the avionics system for the University of Ottawa’s rocketry team. We unfortunately had to scrap last year’s work since it was very unorganized and we had absolutely no documentation to work off of. For this project, I was given the requirement that the system be modular, incrimentally upgradeable, and above all well documented. Fortunately, I am a fan of documentation and have included the two primary documents that describe the system below. This blog post will gloss over the design of these boards, however in-depth information is available in the documents below. I would also like to add that this was my first project involving PCB design, hence the very poor design of the V1 boards depicted below.]]></summary></entry><entry><title type="html">Two G-class Stage Rocket w/ Basic Telemetry</title><link href="http://localhost:4000/two-stage-rocket/" rel="alternate" type="text/html" title="Two G-class Stage Rocket w/ Basic Telemetry" /><published>2022-11-08T00:00:00-05:00</published><updated>2022-11-08T00:00:00-05:00</updated><id>http://localhost:4000/two-stage-rocket</id><content type="html" xml:base="http://localhost:4000/two-stage-rocket/"><![CDATA[<h2 id="experimenting-with-rocketry-electronics">Experimenting with rocketry electronics</h2>

<p>While I may never get a high power rocketry license, I do thoroughly enjoy developing and flying model rockets. None of my past rockets have incorporated any amount of electronics so the purpose of this project is to get a feel for rocketry electronics without any risk by developing only non-terribly-flight-critical components. For this project, I purchased the two biggest rocket engines I can legally get my hands on without any license: AeroTech G80-7T motors.</p>

<h1 id="update-june-2023">UPDATE June 2023</h1>

<p>In order to test the avionics before a flight in which their functionality is critical, I am going to test fly the main stage off of a G80-10T motor which shouldn’t require any special considerations for when the main chute can deploy. I’ve done simulations in OpenRocket (depicted below) which concluded that the 10 second ejection delay should be plenty to allow the rocket to reach apogee. 
<img src="/assets/img/habibi-express/single_stage_simulation.png" alt="Single stage flight simulation" />
The simulation above shows that the motor burnout occurs roughly around 1.5 seconds which means that our ejection charge would deploy at 11.5 seconds and therefore slightly past apogee.</p>

<p>In this test, the avionics system will log its decisions to the SD card onboard the rocket alongside a time-stamp. Ideally, I can start recording video with my phone, send a message to the rocket over telemetry on camera which will reset the rocket’s clock to 0 at that point in time, and then proceed with the launch while maintaining the recording. In this manner, I should be able to match events seen in the video to the timestamped events logged by the rocket and hopefully determine whether or not it detects launch appropriately, detects apogee appropriately, and attempts to deploy the main chute at the appropriate altitude.</p>

<h1 id="update-may-2023">UPDATE May 2023</h1>

<p><img src="/assets/img/habibi-express/assembled_airframe.jpg" alt="Assembled airframe" style="float: right; width:30%; height:50%; margin-left: 10px;" /></p>

<p>It’s been a minute. I’ve been really busy with other commitments but the airframe is finally coming together! Unfortunately, the GPS I got does not seem to work very well. This is the second BN-880 module I’ve gotten, I assumed the first one was a fluke but I guess these are just bad GPS sensors in general. As such, I will need to reprint the nose cone to accomodate a uBlox-M8N chip I have and I will also attempt to install some cameras in the nose cone for the DVRs that I’ve added to the avionics bay. The avionics bay is also rather messy however everything works well from a software perspective. The one issue it has is that the voltage on the 5V rail drops dramatically whenever the radio sends out a telemetry packet. This does not affect the avionics systems but does affect the servo that is in charge of preventing the main chute from deploying straight away. This could be because of a bad LiPo battery that sags a bunch or simply the servo being too cheap so I will first attempt to swap the servo out with a nicer one before going to a nicer battery. I’ve already given the radio a separate 5V regulator from the other avionics and added a capacitor in parallel on the radio’s power input which should theoretically take care of the voltage drop but that has not really fixed anything so far. Given that the other electronics behave themselves, it’s almost certainly an issue with the servo.</p>

<p><img src="/assets/img/habibi-express/avionics_front.jpg" alt="Avionics front" style="float: left; width:50%; height:80%;" />
<img src="/assets/img/habibi-express/avionics_rear.jpg" alt="Avionics rear" style="float: right; width:50%; height:80%;" /></p>

<p>Definitely not a fan of how messy the wiring is but I don’t see it getting much better with the amount of tech stuffed in there. I’ve added an APM power module to use its regulator and add current/voltage sensing to the Arduino so I can get this info through telemetry. There are two sets of wires coming out of the top of the avionics assembly: the first (with the white connector) go to the GPS in the nose cone and the second set (4 free wires) are for power and two video feeds coming from cameras in the nose cone. The four wires at the bottom are for the second stage ignitor and the ejection charge ignitor.</p>

<h1 id="update-nov-2022">UPDATE Nov 2022</h1>

<p>Project is not on track, too many things going on in school however the avionics bay has been printed and mostly assembled. The nose cone is being redesigned to house status LEDs, the GPS, and two cameras for in-flight footage. Pictures coming soon.</p>

<h1 id="update-oct-2022">UPDATE Oct 2022</h1>

<p><img src="/assets/img/habibi-express/recovery_layout_update.jpg" alt="Recovery layout update" style="float: right; width:10%; height:20%; margin-left: 10px;" /> 
Progress is being made on flight controller firmware, the I2C issue has been fixed, and the IMU data is now being read as well. Turns out the Adafruit BMP280 library was looking for the wrong address and I had to force it to read data from the true address. Engine mounts and fins have been attached to the rocket, currently focused on recovery charge and how to protect the rocket’s internals from the motor’s ejection charge as well as the true ejection charge. The motor mounts have plenty of space around them to allow the motor’s ejection charge gases to escape however I need to add a component following the motor to shield the parachute from the motor’s charge and contain the true ejection charge as well. The planned layout is pictured to the right where the green block represents the blast shield, red represents the true ejection charge, yellow represents the drogue chute, and cyan represents the final chute. The rocket splits between the cyan and yellow blocks when the ejection charge detonates.</p>

<p>The avionics bay has been expanded to include MOSFETs for the second stage and ejection charge igniters as well as an SD card reader for data logging, servo to retain the primary parachute, and two DVRs (scrapped the camera inside the body tube). The second stage will be ignited based on the following criteria:</p>
<ul>
  <li>Rocket attitude is within 30 degrees of launch attitude (makes sure the rocket is vertical)</li>
  <li>Rocket altitude is greater than 250 meters (should be 500 meters or so based on simulation)</li>
  <li>Rocket acceleration drops noticeably (simulation suggests peak of 13 Gs however the software will just look for a drop of ~5Gs)</li>
  <li>Launch was detected less than 10 seconds ago (makes sure the conditions cannot be met unless the rocket just took off)</li>
</ul>

<p>Once launch is detected (as a peak in acceleration), the rocket will begin a 3-second timer before checking the conditions listed above and igniting the second stage. Apogee will be detected when vertical acceleration drops below -5m/s^2 after which the ejection charge will be ignited. The final chute will be deployed 250 meters above ground level based on barometric data. Launch window has been slightly pushed back however it should be achievable by end of November :)</p>

<h1 id="update-sep-2022">UPDATE Sep 2022</h1>

<p><img src="/assets/img/habibi-express/fin_laser_cutting.jpg" alt="Laser cutting fins" style="float: right; width:30%; height:50%; margin-left: 10px;" />
Finally got around to laser cutting the fins and I have worked slightly on the firmware for the flight controller. Unfortunately I’m having issues with the barometer since it communicates using 3.3V so the Arduino Mega is not able to interpret the I2C data coming from it. The current solution is to replace the barometer with a proven chip that I can find online as working with the Arduino Mega. I will also attempt to read the I2C data using another 5V Arduino to verify that this is indeed the issue. Finally, I have decided to add a few <a href="https://www.aliexpress.com/item/1005002457700952.html">video recorders</a> and a few analog cameras to capture a few angles of the flight. I’m hoping to add a downward facing camera, a side facing camera, and one looking down the body tube towards the main stage engine to capture the ejection from inside the rocket. I intend model camera mounts and redo the avionics bay by the end of October such that the rocket can be flown early November at the latest.</p>

<h1 id="update-jun-2022">UPDATE Jun 2022</h1>

<p><img src="/assets/img/habibi-express/avionicsFront.jpg" alt="Assembled avionics bay" style="float: right; width:30%; height:50%; margin-left: 10px;" />
The avionics bay has been assembled though it is missing a couple key elements. Firstly, there is no voltage regulator to step down the LiPo’s voltage for the Arduino and related electronics; furthermore, I need to integrate a relay, so the Arduino can ignite the second stage motor once the initial one burns out. Finally, the antenna installed on the design right now can not be used and is solely there to ensure that I don’t accidentally burn the LoRa transceiver by powering it on without an antenna. Everything on the module at the moment is completely wired and ready to go. I have noted the I2C addresses of the MPU6050 and BMP280 and the wire with the white connector sticking out the top of the avionics bay goes to the GPS sensor in the nose cone of the aircraft.</p>

<p>The software for this design won’t be too involved as the Arduino only needs to ignite the second stage 3 seconds after the MPU6050 detects a decrease in vertical acceleration all while broadcasting GPS, altitude, and attitude data at regular intervals. The main concern now is developing viable fins for the rocket body. I am hoping to have them laser-cut at the university but I have yet to inquire about using the equipment.</p>

<h1 id="update-mar-2022">UPDATE Mar 2022</h1>

<p><img src="/assets/img/habibi-express/avionics-CAD-V2-back.PNG" alt="Avionics bay V2 back" style="float: right; width:30%; height:50%; margin-left: 10px;" />
The avionics bay is mostly finalized, and I will attempt to print this soon; I’ve done without the 18650 battery and kept the 3s LiPo which is now housed in a casing at the top of the avionics bay. The LoRa module is now positioned such that an antenna can be directly attached to the module and have space in the rocket fuselage. The only thing lacking from the model to the right is a relay holder to ignite the second stage. I still need to remodel the nose cone since the current GPS holder may not have clearance, so it must be shifted upwards after which I will begin 3D printing these components and assembling the rocket!</p>

<h1 id="update-feb-2022">UPDATE Feb 2022</h1>

<p><img src="/assets/img/habibi-express/rocket-CAD.PNG" alt="Rocket model" style="float: right; width:50%; height:50%; margin-left: 10px;" />
CAD model is now mostly finished, lots of small things still need to be figured out however most of the grunt work is done. I don’t have a concrete plan for how to wire the main stage motor’s igniter in a way that won’t risk tangling the parachute during recovery. Furthermore, I purchased two G80-7T motors however the rocket will need at least 10 seconds after the main stage burns out to reach its apogee meaning that I most likely need to source a G80-13T motor to avoid using any complex recovery mechanisms. Unfortunately, <a href="https://www.greathobbies.com/">Great Hobbies</a> does not carry G80 motors anymore, so I can only source these for unreasonably high prices from <a href="https://www.allrockets.ca/G80-13">AllRockets</a>.</p>

<p><img src="/assets/img/habibi-express/avionics-CAD.PNG" alt="Avionics model" style="float: right; width:30%; height:50%; margin-left: 10px;" />
Main focus now is the avionics bay. The model pictured here has space for an Arduino Mega 2560 (embed), a BMP280, an MPU6050, a LoRa SX1278 transceiver, and two batteries. The nose cone contains a GPS antenna bracket for positioning as well. This is the second iteration of the avionics bay, and it contains space for both an 18650 Li-Ion cell (in green) and a small 3S 700mAh LiPo next to the Li-Ion cell. I’m concerned that the ~3V from the 18650 will not be enough to ignite the main stage of the rocket even with a boost converter which is why I included the LiPo. I originally considered using the 18650 in light of its higher energy density however it only has roughly 1.5 times the energy stored by the LiPo so it will likely be discarded in the next iteration.</p>

<h1 id="update-dec-2021">UPDATE Dec 2021</h1>
<p>Rocket design was finalized in <a href="https://openrocket.info/">OpenRocket</a> and basic simulation was done; maximum altitude estimated at roughly 1.1km with a max speed of Mach 0.52. I made some faster designs and others with higher apogees, but this model seems the most predictable based on how much tech I want to fly with the rocket and how lightly I can manufacture things.</p>

<p><img src="/assets/img/habibi-express/open-rocket-sim.PNG" alt="OpenRocket Model" />
<img src="/assets/img/habibi-express/open-rocket-sim-graph.PNG" alt="OpenRocket Simulation" /></p>

<h1 id="design">Design</h1>
<h2 id="motor-mounts">Motor mounts</h2>

<p><img src="/assets/img/habibi-express/motor-mount-and-coupler.png" alt="Recovery layout update" style="float: right; width:35%; margin-left: 10px;" /> 
I watched a <a href="https://www.youtube.com/watch?v=4fhoCt9vXA8">video</a> by ProjectAir on YouTube about a rocket he built using similarly powerful motors and I based my rocket motor mounts on his design. The motor mounts consist of a small tube for the motor and a larger tube that fits snugly into the rocket body. These two are connected by 8 perpendicular supports between the two cylindrical extrusions. The holes on the bottom of this motor mount also work to hold the first stage onto the main stage by using 8 pegs protruding from the first stage which fit snugly into the 8 holes of the motor mount above.</p>

<p>A screenshot of the motor mount CAD (black) and the first stage coupler (gray) is included to the right. One of the pegs on the coupler is hollow, allowing ignition wires to reach the bottom of the second stage motor.</p>

<h2 id="avionics">Avionics</h2>

<p>I intend to have live data logging and telemetry at the very least. This rocket will include a GPS, barometer, and accelerometer as well as an ignition system for the main stage engine. I would also like to include some system that can delay the deployment of the main chute since it will significantly increase the rocket’s drift during recovery however I’m unsure of how reliably I can integrate such a feature. All the electronics will be housed near/in the nose cone and the rocket will separate close to the main stage motor for recovery such that the body tube/nose cone section containing the electronics remains intact.</p>]]></content><author><name>Serban Popovici</name></author><summary type="html"><![CDATA[Experimenting with rocketry electronics]]></summary></entry><entry><title type="html">Security Camera Privacy Hack</title><link href="http://localhost:4000/camera-privacy-hack/" rel="alternate" type="text/html" title="Security Camera Privacy Hack" /><published>2022-10-16T00:00:00-04:00</published><updated>2022-10-16T00:00:00-04:00</updated><id>http://localhost:4000/camera-privacy-hack</id><content type="html" xml:base="http://localhost:4000/camera-privacy-hack/"><![CDATA[<h2 id="enhancing-privacy-of-cheap-security-cameras">Enhancing privacy of cheap security cameras</h2>

<p>I’ve always been a little paranoid of having IoT devices live streaming views of my living space however I have a long trip coming up so a couple security cameras would be nice to keep an eye on my place. I considered a couple ways of modifying the cameras to provide more privacy:</p>

<ul>
  <li>A Python script that forges HTTP requests and orders the camera to turn around;</li>
  <li>A physical shutter external to the camera that blocks the lens; and</li>
  <li>An internal relay that cuts power to the camera module.</li>
</ul>

<p>Unfortunately these were not ideal. The first idea was unreliable because turning the camera through a script still allows the camera to turn itself back on its own and may not be reliable should a software update be pushed that depreciates my integration of the camera’s API. The second was not an elegant solution and would be difficult to integrate on a PTZ camera that moves around. 
<img src="/assets/img/foscam-hack/whole_camera.jpg" alt="Final camera with LED" style="float: right; width:50%; height:80%;" />
Finally, the third did not work because the camera would not come back online after the camera module got disconnected from its motherboard, no matter what I tried. In the end I settled on modifying the camera’s internal IR-CUT filter by covering the IR-CUT part with a sticker and integrating a microcontroller to toggle the state of the filter assembly. This was an elegant and invisible solution that should not noticeably affect image quality since the camera is being used indoors so there should be very little ambient IR light. The final state of the camera is pictured to the right with a status LED jankily integrated below the FOSCAM logo.</p>

<p>The privacy mode of these cameras is toggled using a Home Assistant - Ring integration that allows the cameras to see when the Ring alarm is armed.</p>

<h1 id="hardware">Hardware</h1>

<p>While understandably not the most secure way to go about this, I used a few NodeMCU 1.0 modules I had laying around for this project. A more ideal solution would be to either use separate transceivers to air-gap the privacy microcontrollers from the internet or to use a WiFi/Bluetooth capable microcontroller that can sniff and determine what devices are around it. Regardless, the hardware here is relatively simple. The camera has:</p>

<ul>
  <li>An ESP-12E module;</li>
  <li>A WS2812B LED; and</li>
  <li>A MX1508 H-bridge IC.</li>
</ul>

<p>The MX1508 was needed since the ESP operates at 3.3V however the IR-CUT filter mechanism requires a higher voltage to actuate. The LED provides a hardcoded correlation between the state of the IR-CUT filter and a visual indication of whether the camera is able to see anything. The code for this is rather simple and included on my GitHub.</p>

<p><img src="/assets/img/foscam-hack/IR_cut_assembly.jpg" alt="IR cut assembly" style="float: left; width:50%; height:80%;" />
<img src="/assets/img/foscam-hack/MX1508_wired.jpg" alt="MX1508 wired" style="float: right; width:50%; height:80%;" />
<img src="/assets/img/foscam-hack/ESP.jpg" alt="ESP position" style="float: left; width:50%; height:80%;" />
<img src="/assets/img/foscam-hack/ESP_tucked_in.jpg" alt="ESP tucked in" style="float: right; width:50%; height:80%;" /></p>

<p>The first picture (top left) depicts the IR cut filter before I modified it by adding tape to one of the transparent partitions. The second depicts the wiring for the H-bridge, nothing too complex there. The H-bridge was covered in tape to prevent it from shorting with anything else in the camera and then placed in the back of the camera’s head, next to the motor (not pictured). The ESP was tucked in above the motherboard of the camera and leeches power off of the motherboard for itself. The camera receives regulated 5V at its DC input jack so no special considerations were needed.</p>]]></content><author><name>Serban Popovici</name></author><summary type="html"><![CDATA[Enhancing privacy of cheap security cameras]]></summary></entry><entry><title type="html">BRZ Head Unit</title><link href="http://localhost:4000/brz-head-unit/" rel="alternate" type="text/html" title="BRZ Head Unit" /><published>2022-10-01T00:00:00-04:00</published><updated>2022-10-01T00:00:00-04:00</updated><id>http://localhost:4000/brz-head-unit</id><content type="html" xml:base="http://localhost:4000/brz-head-unit/"><![CDATA[<p>This page outlines the process of modifying the BRZ’s stock head unit to contain custom components. I maintained the casing of the original head unit to avoid designing custom mounting hardware and alleviate the need to reverse engineer the casing/mounting point dimensions.</p>

<h2 id="architecture">Architecture</h2>

<p><em>include block diagram of design here</em></p>

<h2 id="final-product">Final Product</h2>

<p><img src="/assets/img/brz/head_unit_assembly.jpg" alt="Head unit assembly process" style="float: right; width:50%; height:80%; margin-left: 10px;" /></p>

<p>The updated head unit was a very satisfying thing to assemble. It effectively assembles from bottom to top as you would a layered cake, with each ‘level’ of electronics stacking on top of each other. Each layer as well as the components it houses is discussed more in depth in the Internal CAD section. The pictures below display the assembly process and final result:</p>

<p><img src="/assets/img/brz/head_unit_internals_real.jpg" alt="Head unit internals" />
<img src="/assets/img/brz/final_head_unit.jpg" alt="Final head unit" /></p>

<p>The final product, pictured above, came out rather clean! There’s a ribon cable protruding from the front that goes to the main media display and there are a few small JST-SM connectors as well as some generic I/O on the back to interface with the center console display, CAN bus, and various other things. My initial plan was to mount the display to the head unit itself, but aligning it with the trim and designing a mount that can be secured while also being removeable for a display as large as mine proved incredibly difficult. I therefore settled for mounting the display in the trim piece itself with only a ribon cable connecting it to the head unit. The original head unit is included below though I had already removed the CD player in this picture which is why it is missing its top XD.</p>

<p><img src="/assets/img/brz/head_unit_original.jpg" alt="Original head unit" /></p>

<p>I found a blog post and managed to obtain the stock wiring plugs for the head unit (Metra 70-1761) to get power and interface with the vehicle’s speakers. Lastly, the head unit gets a few state-related signals from the car such as a reverse signal (to turn on the backup camera) and an illumination signal (to notify it when the running lights are on). Both of these signals are forwarded back out through the JST-SM connectors and will connect to a transceiver computer by the car’s OBD port such that they can be encoded into CAN packets that are passed through my CAN network. This allows all of my hardware to keep track of their state and reduces the amount of hardware required in the head unit itself.</p>

<h2 id="cad">CAD</h2>

<p>The head unit CAD solely consists of a mounting framework to include all the necessary hardware within the casing of the stock head unit. I initially intended to mount the media display to the head unit itself however I ended up simply mounting it to the trim piece which saved me a ton of work. Of the two pictures included below, the first shows the CAD of the internal framework that holds all the components in the head unit whereas the second is a picture of the assembled head unit. 
<img src="/assets/img/brz/head_unit_internals.png" alt="Head unit internals" /></p>

<p>The inside of the OEM head unit’s casing has been redesigned to utilize a series of stackable brackets providing mounting points for the following components:</p>

<ol>
  <li>Khadas VIM4 –&gt; Linux backend computer</li>
  <li>USB 5.1 sound card –&gt; Required since Khadas VIM4 does not have a DAC onboard</li>
  <li>RCA to HDMI converter –&gt; Used to convert thermal camera to HDMI since Khadas VIM4 has an HDMI in</li>
  <li>NVMe SSD –&gt; used for dashcam/blackbox purposes</li>
  <li>SPI CAN shield –&gt; connects Khadas VIM4 to the CAN bus</li>
  <li>Raspberry Pi 4B –&gt; Android frontend computer</li>
  <li>Head unit display driver boards –&gt; two boards, one for power delivery and another for logic</li>
  <li>2CH amplifier boards (2 of these) –&gt; amplify audio for FL, FR, RL, and RR channels</li>
  <li>5V regulator –&gt; provides 5V for Khadas VIM4, Raspberry Pi, USB DAC, and RCA to HDMI converter</li>
  <li>Voltage splitter –&gt; splits battery voltage for display driver, amplifiers, and 5V regulator which do not require upstream power regulation</li>
</ol>

<p>There are 4 total brackets in the CAD design depicted above. The bottom bracket solely holds the display driver and Raspberry Pi, the second bracket holds the VIM4 alongside its NVMe SSD and CAN shield, the third holds one of the amplifiers and the display driver’s power board, and the fourth holds the final amplifier alongside the 5V regulator, USB DAC, and RCA to HDMI converter. The third bracket has a gap on the right side of the image to provide clearance for the VIM4’s fan.</p>

<h2 id="display-mounting">Display Mounting</h2>

<p><img src="/assets/img/brz/displays_mounted_unfinished.jpg" alt="Unfinished display mounts" style="float: right; width:50%; height:80%;" /></p>

<p>Two displays are currently connected to the head unit: a media display and the center console display. I’ve mostly finalized the mount for the media display and the mount for the center console display is about halfway done. In the picture to the right, neither display mount is finalized. The media display does not have body filler and is therefore overhanging above the trim piece on either side and the center console display does have a finalized mounting bracket but no body filler to mate it with the vehicle’s trim.</p>

<h3 id="media-display-mount">Media Display Mount</h3>

<p>Starting with the media display, I decided to refrain from mounting it to the head unit itself. Instead, I modified the stock trim with body filler to hold the new display which enabled me to effortlessly achieve a more ‘stock’ aesthetic. Below are a set of pictures of the process; I feel the final product is pretty decent, having never used body filler before. My only complaint is that the right side of the display does not mate perfectly with the trim pieces but I simply haven’t had the time and motivation to take it apart and attempt to fix this. Since the display spans across both trim pieces, I’d need to mount them both in the vehicle and sand them together to achieve a nice finish all while trying to match the display’s profile without being able to have the display inserted during sanding.</p>

<p><img src="/assets/img/brz/media_bondo_1.jpg" alt="Bondo work 1" style="float: left; width:49%; height:80%;" />
<img src="/assets/img/brz/media_bondo_2.jpg" alt="Bondo work 2" style="float: right; width:49%; height:80%;" />
<img src="/assets/img/brz/media_bondo_3.jpg" alt="Bondo work 3" style="float: left; width:49%; height:80%;" />
<img src="/assets/img/brz/media_bondo_4.jpg" alt="Bondo work 4" style="float: right; width:49%; height:80%;" /></p>

<p>The final product obviously isn’t perfect, but when painted black and mounted to the dash, it looks pretty good.</p>

<h3 id="center-console-display-mount">Center Console Display Mount</h3>

<p><img src="/assets/img/brz/center_console_display_cut_plan.jpg" alt="Center console display cut plan" style="float: right; width:50%; height:80%;" /></p>

<p>This display was a little more intricate to mount. I began by using a soldering iron to cut a somewhat-arbitrary hole in the center console. I knew I wanted to use the sides of the seat warmer button cutout as the edge of my display and the rest of the cut was more or less arbitrary. I cut up to the silver trim piece and completed a rectangular shape as depicted to the right (excuse the crappy sketch). The only requirement for this hole is that it be smaller than the display which allows the 3D printed bracket holding the display to mate seamlessly with the center console.</p>

<p>he 3D-printed bracket was designed to rest on the ledge that was left on the center console (1) and mount to some existing screwholes within the center console trim that were used for the
<img src="/assets/img/brz/center_console_bracket_1.jpg" alt="Center console display bracket 1" style="float: right; width:50%; height:80%;" />
sport mode/traction control buttons (2). Unfortunately, there is still a corner of the bracket (3) that is not supported by anything but I have not found this to be an issue when using the display. Lastly, the driver PCB for the display is mounted on the bottom of the 3D-printed bracket and connects to the head unit using an HDMI cable and a USB cable to provide power and data for the digitizer. Below are two pictures of the final product with the display sitting flush along the center console. I did end up redoing the bracket a few times after this as the bottom part of the display (3 in the picture above) kept popping out when the shifter trim was inserted as the shifter trim pushed back against the display bracket. The only thing that is left to do at the moment is add body filler to better mate the display to the shifter trim piece.</p>

<p><img src="/assets/img/brz/center_console_bracket_2.jpg" alt="Center console display bracket 2" style="float: left; width:49%; height:80%;" />
<img src="/assets/img/brz/center_console_bracket_3.jpg" alt="Center console display bracket 3" style="float: right; width:49%; height:80%;" /></p>

<h2 id="behavioural-nightmares">Behavioural Nightmares</h2>

<p>There was no shortage of software issues when trying to get this head unit to function as a head unit. Part of the premise of this project was the idea that there was no way I could end up with less functionality than my original head unit, which would only really play bluetooth media. This statement remained rather untrue for the first couple weeks of having the new head unit installed for a variety of reasons which I will list below:</p>

<ul>
  <li>Wireplumber: This problem took a buddy and I many hours to solve because it is not thoroughly documented and we suspected many other things to be wrong. The issue was that Wireplumber would check for a logged in user and refuse to play audio unless someone was logged in. There ended up being a config file burried in Ubuntu’s filesystem that disabled this behaviour and allowed the system to play audio regardless of there being a user logged in. This issue also prevented a bluetooth device from being connected to the head unit since the Khadas VIM4 would instantaneously drop the connection as a result of there being no audio session manager active.</li>
  <li>Amp fine-tuning: I got cheap audio. Of course I did. The setup works but it has its flaws. The speakers in the car seem to be rather low impedance and therefore sensitive to electrical noise which is a tremendous issue with low quality amplifiers. I’ve mitigated this by setting the volume adjustment potentiometer of each amp just a hair above 0%. This generally works but the amplifier or USB sound card clearly clips when I try to play things at an excessive volume. I know it’s not the speakers topping out, it sounds artificial and could probably be fixed if I increased the volume setting of the amp. The noise I’m referring to is a clicking sound that lines up with the status LED on the Khadas VIM4. There is no electrical noise prior to the VIM4 booting which seems to imply that the issue lies with my USB DAC.</li>
  <li>Phone calls: This is likely related to the Wireplumber issue but I have yet to figure out how to get phone calls working in the car. My phone recognizes the car as a bluetooth headset but the car neither plays the phone call audio or returns any audio from the microphone. I’ve been told this could be because ofono is installed and Wireplumber attemps to use it for phone calls instead of handling the audio forwarding itself, however I have not been able to find ofono and I frankly have yet to analyze how the VIM4 handles audio sources/sinks when a phone call is active.</li>
  <li>Touch screen issues: The driver for the center console display has an input for the digitizer and a USB output labeled “touch”, however I do not get any touch inputs on the Raspberry Pi. This could be a software issue but it’s most likely a hardware issue since the manufacturer shipped me an extra, small PCB dedicated for handling the digitizer. I will hopefully swap this in soon and see if that fixes it. My weird display architecture (large media display w/o touch and smaller center console display w/ touch) does not allow me to run Android on the head unit as I had initially planned so I am going to rewrite the UI, most likely in NodeJS with Electron.</li>
  <li>Battery issues: I somehow managed to overlook one of the primary improvements I intended to make when designing this new head unit. The car, for whatever reason, cuts accessory power for a fraction of a second anytime the engine is started. This naturally causes all electronics running off of accessory power to reboot. My last minute addition is pictured below and consists of an Arduino with a CAN transceiver (a half-assed attempt at integrating wake-on-CAN functionality), a relay, and a voltage divider connected to the accessory power wire. I included the Arduino because I had previously kept an identical one powered on in the car 24/7 without issues but this one kept glitching and turning on the head unit. This naturally left me without power on many occasions, so much so that I wired an XT60 to my car battery and kept a 3S LiPo with me at all times to jump the car. My new solution is to include a capacitor and resistor in parallel that drive MOSFETs to turn the head unit on. The capacitor and resistor network is connected to the accessory power and the components are chosen such that they allow ~3 seconds before the MOSFETs shut off. The MOSFETs lie between the head unit’s power input and the constant 12V power provided by the vehicle.</li>
</ul>]]></content><author><name>Serban Popovici</name></author><summary type="html"><![CDATA[This page outlines the process of modifying the BRZ’s stock head unit to contain custom components. I maintained the casing of the original head unit to avoid designing custom mounting hardware and alleviate the need to reverse engineer the casing/mounting point dimensions.]]></summary></entry><entry><title type="html">BRZ Wiring</title><link href="http://localhost:4000/brz-wiring/" rel="alternate" type="text/html" title="BRZ Wiring" /><published>2022-10-01T00:00:00-04:00</published><updated>2022-10-01T00:00:00-04:00</updated><id>http://localhost:4000/brz-wiring</id><content type="html" xml:base="http://localhost:4000/brz-wiring/"><![CDATA[<p>Don’t even get me started.</p>

<p><img src="/assets/img/brz/wiring_1.jpg" alt="Wiring 1" style="float: left; width:50%; height:80%;" />
<img src="/assets/img/brz/wiring_2.jpg" alt="Wiring 2" style="float: right; width:50%; height:80%;" /></p>

<p><img src="/assets/img/brz/wiring_3.jpg" alt="Wiring 3" style="float: left; width:50%; height:80%;" />
<img src="/assets/img/brz/wiring_4.jpg" alt="Wiring 4" style="float: right; width:50%; height:80%;" /></p>

<p><img src="/assets/img/brz/wiring_5.jpg" alt="Wiring 5" />
<img src="/assets/img/brz/wiring_6.jpg" alt="Wiring 2" /></p>

<h2 id="general-overview">General overview</h2>

<p>This page is somewhat just documentation for myself with regards to connector pinouts but also contains some general information lower down.</p>

<p>I bought a bunch of ‘waterproof’ connectors off of AliExpress for this project. I say waterproof in quotes because I disconnected one of the connectors at some point and it was filled with water. Regardless, I ordered a variety of connectors with different sizes and pin numbers for various purposes. Their purpose and pinout is included below:</p>

<ul>
  <li>SP13 (4-pin) –&gt; Used for power and USB data to cameras outside the cabin.
    <ol>
      <li>GND</li>
      <li>PWR</li>
      <li>D+</li>
      <li>D-</li>
    </ol>
  </li>
  <li>SP20 (2-pin) –&gt; Used for audio or power, one for the siren speaker up front and others will be installed wherever power is needed outside of the cabin.
    <ol>
      <li>GND</li>
      <li>PWR</li>
    </ol>
  </li>
  <li>SP20 (3-pin) –&gt; Used for power and data to addressable LEDs outside the cabin.
    <ol>
      <li>GND</li>
      <li>PWR</li>
      <li>DAT</li>
    </ol>
  </li>
  <li>SP20 (4-pin) –&gt; Used for power and CAN outside the cabin.
    <ol>
      <li>GND</li>
      <li>PWR</li>
      <li>CAN_HI</li>
      <li>CAN_LO</li>
    </ol>
  </li>
</ul>

<h2 id="network">Network</h2>

<p><img src="/assets/img/brz/diagnostic_ethernet_port.jpg" alt="Diagnostic Port" style="float: right; width:50%; height:80%;" /></p>

<p>The car has an ethernet-based network to connect its various computers and an ethernet-based camera up front. This network also provides WiFi to passengers and internet access to the aforementioned devices. The <a href="https://www.aliexpress.com/item/4001224227702.html">WiFi-LTE modem</a> I purchased only has 4 ports available but I need 5 to connect the three computers, camera up front, and a diangostic port included in the dash for debugging purposes. The slot below the ethernet jack was meant to be a USB-C port for tethering my phone and running Android Auto but I have not installed the port in the car just yet.</p>

<p><img src="/assets/img/brz/LTE_modem.jpg" alt="LTE modem" />
<img src="/assets/img/brz/ethernet_switch.jpg" alt="Ethernet switch" /></p>

<p>Above are pictures of the network setup in the trunk. The LTE modem is mounted to the top of the trunk with double-sided tape and zip ties whereas the ethernet switch is left on the trunk floor. The extra wiring strapped to the modem is what I had used to power it prior to installing the fusebox and I have yet to remove it. The switch position is not finalized which is why the wires are left bundled up for the time being.</p>

<h2 id="power">Power</h2>

<p>I installed a separate fuse box in the trunk to power a few things, namely:</p>

<ul>
  <li>The subwoofer;</li>
  <li>The rear defence computer (not yet installed);</li>
  <li>The networking hardware;</li>
  <li>The CAN network;</li>
  <li>The LightLink module; and</li>
  <li>The vision computer</li>
</ul>

<p>Thanks to the fusebox, I can add individual fuses to all of these systems. I ran an 8-gauge wire from the battery to this fusebox, with an inline fused installed immediately next to the battery as well as another installed on the other end, in the fusebox.</p>

<h2 id="can">CAN</h2>

<p>For CAN, I am using a rather thick (18-gauge) wire intended for RS485 that contains two twisted pairs. The CAN network begins in the trunk, where it obtains power from the rear fusebox. It then proceeds along he center console, goes to the head unit, then under the steering clumn, after which it makes its way under the hood to interface with things like the thermal camera.</p>]]></content><author><name>Serban Popovici</name></author><summary type="html"><![CDATA[Don’t even get me started.]]></summary></entry><entry><title type="html">BRZ Gallery</title><link href="http://localhost:4000/brz-gallery/" rel="alternate" type="text/html" title="BRZ Gallery" /><published>2022-10-01T00:00:00-04:00</published><updated>2022-10-01T00:00:00-04:00</updated><id>http://localhost:4000/brz-gallery</id><content type="html" xml:base="http://localhost:4000/brz-gallery/"><![CDATA[<h2 id="accident">Accident</h2>

<p><img src="/assets/img/brz/accident.jpg" alt="Accident" style="float: right; width:50%; height:80%;" /></p>

<p>I managed to rear end someone in this car, definitely my fault, but I was not willing to let it die that soon because I had barely done any work on it. The accident luckily wasn’t very bad, the other car suffered next to no damage and mine took most of the hit. I wasn’t going awfully fast when I hit the other car so my front end did not crumple much and the car was therefore perfectly fine, mechanically speaking that is. Here are pictures of the repair process :)</p>

<p><img src="/assets/img/brz/repair_1.jpg" alt="Repair 1" style="float: left; width:50%; height:80%;" />
<img src="/assets/img/brz/repair_2.jpg" alt="Repair 2" style="float: right; width:50%; height:80%;" />
<img src="/assets/img/brz/repair_3.jpg" alt="Repair 3" />
<img src="/assets/img/brz/repair_4.jpg" alt="Repair 4" /></p>

<p>Here are some pictures immediately following the accident showing the extent of the damage. I bent a variety of things up front but the frame rails of the car remained straight. These pictures show the bent front crash bar, bent rad support, bent fender, and bent hood. This happened in the fall when I didn’t have much capital to throw around so I solely replaced the front crash bar and rad support which allowed the hood to close again. Due to the way the car was bent, the hood would not close with the old rad support as the hood latch had been pushed too far in. Not shown in the pictures is the interior, the driver side airbag and seatbelt tensioner deployed and I don’t believe I ever took a picture of that.</p>

<p><img src="/assets/img/brz/repair_5.jpg" alt="Repair 5" style="float: left; width:50%; height:80%;" />
<img src="/assets/img/brz/repair_6.jpg" alt="Repair 6" style="float: right; width:50%; height:80%;" />
<img src="/assets/img/brz/repair_7.jpg" alt="Repair 7" style="float: left; width:50%; height:80%;" />
<img src="/assets/img/brz/repair_8.jpg" alt="Repair 8" style="float: right; width:50%; height:80%;" /></p>

<p>Even with the rad support replaced, the hood did not line up appropriately with the front bumper. As it turns out, the passenger side fender support bracket was bent in addition to the fender itself, both of which dictate how the bumper and headlight line up. The hood and hood hinges were definitely bent as well, further influencing the panel gaps on the car.</p>

<p><img src="/assets/img/brz/repair_9.jpg" alt="Repair 9" style="float: left; width:50%; height:80%;" />
<img src="/assets/img/brz/repair_10.jpg" alt="Repair 10" style="float: right; width:50%; height:80%;" />
<img src="/assets/img/brz/repair_11.jpg" alt="Repair 11" style="float: left; width:50%; height:80%;" />
<img src="/assets/img/brz/repair_12.jpg" alt="Repair 12" style="float: right; width:50%; height:80%;" /></p>

<p>The pictures above were from replacing the fender support bracket once spring time came around. This definitely improved panel gaps however they most definitely weren’t fixed due to the hood and hood hinges still being bent. Furthermore, the passenger side fender had rusted while the car was in storage for the winter so I ended up purchasing another from a scrap yard and having it paint-matched professionally.</p>

<p><img src="/assets/img/brz/repair_13.jpg" alt="Repair 13" style="float: left; width:50%; height:80%;" />
<img src="/assets/img/brz/repair_14.jpg" alt="Repair 14" style="float: right; width:50%; height:80%;" />
<img src="/assets/img/brz/repair_15.jpg" alt="Repair 15" style="float: left; width:50%; height:80%;" />
<img src="/assets/img/brz/repair_16.jpg" alt="Repair 16" style="float: right; width:50%; height:80%;" /></p>

<p>These were the final steps of the repair. A new bumper from the dealer in Ottawa was approximately 150% MSRP for whatever reason. Since I had already send my airbag module to the states to have it reset, I also went there to pick up a new bumper alongside all the accompanying trim pieces. Lastly, I got a black hood from Toronto and then sent the car in for paint to have the whole front end redone :)</p>

<p><img src="/assets/img/brz/repair_17.jpg" alt="Repair 17" /></p>

<p>And just like that, she’s back!</p>]]></content><author><name>Serban Popovici</name></author><summary type="html"><![CDATA[Accident]]></summary></entry><entry><title type="html">BRZ User Interface</title><link href="http://localhost:4000/brz-user-interface/" rel="alternate" type="text/html" title="BRZ User Interface" /><published>2022-10-01T00:00:00-04:00</published><updated>2022-10-01T00:00:00-04:00</updated><id>http://localhost:4000/brz-user-interface</id><content type="html" xml:base="http://localhost:4000/brz-user-interface/"><![CDATA[<h3 id="head-unit-display">Head Unit Display</h3>

<p>The large head unit display is split horizontally into two sections: a ‘big container’ which is 3/4 of the display’s width and a ‘small container’ which occupies the remaining space. The views displayed by the big container and their respective purpose are as follows:</p>
<ul>
  <li>Navigation fragment –&gt; Contains an interactive map that the user</li>
  <li>Lighting control fragment –&gt; Handles interior accent colours and vehicle under-lighting (legal light functions)</li>
  <li>Safety fragment –&gt; Displays live view of cameras around the car as well as any computer vision-related safety warnings</li>
  <li>Settings fragment –&gt; Allows user to modify settings of any subsystem</li>
  <li>Defense fragment –&gt; Compliments defense fragment in small container, displays advanced countermeasures</li>
</ul>

<p>The views displayed by the small container and their respective purpose are as follows:</p>
<ul>
  <li>Media fragment –&gt; Handles media playback controls</li>
  <li>Diagnostic fragment –&gt; Mirror of center console display, describes states of vehicle systems</li>
  <li>Soundboard fragment –&gt; Enables playback of custom sounds through a loudspeaker in front of vehicle</li>
  <li>Pop-up defense fragment –&gt; Brief rundown of countermeasure states, this fragment is automatically overlaid when vehicle detects radar/lidar etc.</li>
  <li>Traffic advisor fragment –&gt; Allows user to control illegal light patterns of vehicle including police and hazard strobes</li>
</ul>

<p>In addition to the two primary fragment containers, a few fragments can be overlaid on top of the whole display in specific circumstances:</p>
<ul>
  <li>Parking fragment –&gt; Overlaid when vehicle is put into reverse by driver and persists until vehicle speeds up regardless of which gear the vehicle is in. This fragment provides data from parking sensors and cameras around vehicle to facilitate parking.</li>
  <li>Merging fragment –&gt; Pops up when merging right, provides live view of traffic in right lane so driver can see all vehicles in adjacent lane and blind spot.</li>
</ul>

<p>Here are screenshots of what the head unit display looks like. I wrote the sofware for his in Android, however the weird display architecture of the head unit combined with the fact that I’m trying to run Android on a Raspberry Pi makes it unusable. Instead of fighting with the kernel to get something to work, I’ve decided to rewrite the page in NodeJS with electron and keep Raspbian running on the Pi. Ideally, this will facilitate fine tuning the behaviour of the Pi as Linux is much more flexible and also allows the Pi to easily interface with the CAN bus or whatever other I/O I may add in the future.</p>

<p><img src="/assets/img/brz/media_display_sample_layout.png" alt="Media Display Sample Layout" />
<img src="/assets/img/brz/media_display_sample_layout_2.png" alt="Media Display Sample Layout" /></p>

<h3 id="diagnostic-display">Diagnostic Display</h3>

<p>This display layout is very much a work in progress because I’m unsure of what functionality I will assign to the display and so I’m unsure as to how to lay things out. I do intend to add touch screen buttons to replace the four physical buttons that used to be below this display (2x seat warmers, sport mode, and traction control).</p>

<p><img src="/assets/img/brz/center_console_layout_sample.png" alt="Center Console Display Sample Layout" /></p>

<h3 id="gauge-cluster-display">Gauge Cluster Display</h3>

<p>I have not begun work on this. I bought a second cluster to modify it into a digital one but I’m focused on other things.</p>

<p>Listens to car’s CANBUS and displays the same information as was available with original gauge cluster though it also adds data for range and displays alerts from vehicle systems. (TRUE?) Furthermore, can be used to display night vision camera in front of vehicle to drive in less than optimal lighting conditions.</p>

<h2 id="interactive-user-interface">Interactive User Interface</h2>

<p>The diagnostic displays is the only one with touchscreen functionality and the head unit display can only be controlled using steering wheel buttons for a handsfree experience. The right side steering wheel buttons are used to control the contents of the big container while the left side steering wheel buttons are used for the small container’s contents. Additionally, there are dedicated buttons or combinations thereof that can always be used to toggle critical functions such as the vehicle’s legal mode regardless of what content is live at the time.</p>]]></content><author><name>Serban Popovici</name></author><summary type="html"><![CDATA[Head Unit Display]]></summary></entry><entry><title type="html">BRZ Lighting</title><link href="http://localhost:4000/brz-light-link/" rel="alternate" type="text/html" title="BRZ Lighting" /><published>2022-10-01T00:00:00-04:00</published><updated>2022-10-01T00:00:00-04:00</updated><id>http://localhost:4000/brz-light-link</id><content type="html" xml:base="http://localhost:4000/brz-light-link/"><![CDATA[<h2 id="light-modifications">Light Modifications</h2>

<p>The car uses <a href="/brz-custom-hardware">my custom LightLink</a> module will be installed under the steering column, next to the car’s body control module which provides it with immediate access to all of the car’s stock lighting wiring. I may have to run some extra wires for things like my brake and running lights since the running lights, for example, probably have a single wire connecting them to the body control module but I want the ability to toggle both independently. The only lights that will remain controlled by the body control module are the third brake light and the headlight highbeams; everything else will be handled by the LightLink module.</p>

<h3 id="license-plate-leds">License Plate LEDs</h3>

<p><img src="/assets/img/brz/license_plate_LED_CAD.png" alt="License Plate LED CAD" style="float: right; width:40%; height:80%;" />
There wasn’t much of a reason to redo these, the light bulbs were perfectly adequate but I figured I might as well add more RGB. These mounts are currently flawed since the LEDs got incredibly hot and managed to melt the ABS so they are currently only partially supported by what’s left of the plastic bracket. The current CAD is pictured to the right. I’m going to fix this by mounting the LEDs onto some sort of metal piece, likely some sheet metal cut to size, such that they can better dissipate the heat the generate. From there, the ABS mount will solely come in contact with the sheet metal and not the LED. I’m hoping this will provide enough insulation to prevent the ABS from melting again.</p>

<h3 id="side-markers">Side Markers</h3>

<p>The following may be useful to other people hoping to get custom side markers for their BRZ. I managed to lose one of mine while driving and it got run over before I had the chance to go retrieve it off the side of the road.
<img src="/assets/img/brz/side_marker_CAD.png" alt="Side marker CAD" style="float: right; width:30%; height:80%;" />
As it turns out, it is in fact cheaper to buy high power addressable RGB LEDs and 3D-print two custom side markers than it is to obtain a single OEM one so I naturally chose that route. The CAD to the right shows the final iteration of the side marker which houses a 9W RGB LED. No space is provided for the LED’s driver board as it will be housed on the inside of the bumper. I’m not sure if this design is functional. I did a similar thing for the license plate LEDs, as explained in the section above, and may redo this design to avoid having the ABS melt. The picture below provides an idea of how the LED would currently fit in the design.</p>

<p><img src="/assets/img/brz/side_marker_LED_test_fit.jpg" alt="Side marker LED test fit" style="width:50%; display:block; margin-left: auto; margin-right: auto;" /></p>

<h3 id="fourth-brake-light">Fourth Brake Light</h3>

<iframe style="float: right; width:20%;" src="/assets/img/brz/fourth_brake_light_video.mp4" frameborder="0" allowfullscreen="allowfullscreen">&nbsp;</iframe>

<p>This was a fun one. The stock fourth brake light only contains two bulbs that turn on when the vehicle is in reverse. The plastic housing of the light quite literally has a spot dedicated to having a light bulb behind the red lens but none is included from the factory. I knew I was going to add a fourth brake light to the car and decided that I might as well add RGB to the two reverse light compartments as well. I don’t seem to have any pictures of the modified fourth brake light though I do have this video where I had programmed it to flash red and blue. The assembly process was rather simple, I cut some holes in the fourth brake light casing with my soldering iron that were just large enough for the portion of the LED that lights up. I then screwed the LEDs into the plastic of the fourth brake light using the two mounting holes they have and lathered the completed thing with high temp hot glue. I’ve had this running for quite a while now and it has yet to fail. Aesthetically, the fourth brake light truly completes the rear end of the car.</p>

<p><img src="/assets/img/brz/fourth_brake_light_rear_end.jpg" alt="BRZ rear" style="width:50%; display:block; margin-left: auto; margin-right: auto;" /></p>]]></content><author><name>Serban Popovici</name></author><summary type="html"><![CDATA[Light Modifications]]></summary></entry><entry><title type="html">BRZ Vision System</title><link href="http://localhost:4000/brz-vision-system/" rel="alternate" type="text/html" title="BRZ Vision System" /><published>2022-10-01T00:00:00-04:00</published><updated>2022-10-01T00:00:00-04:00</updated><id>http://localhost:4000/brz-vision-system</id><content type="html" xml:base="http://localhost:4000/brz-vision-system/"><![CDATA[<h2 id="general-overview">General Overview</h2>

<p>All cameras are wired to the center console, near the airbag module of the car, where I will mount a nVidia Jetson Orin NX. Any cameras mounted somewhere that could be reasonably reached by water have been doused in 422C conformal coating by MG Chemicals to provide an additional layer of protection from water damage.</p>

<h2 id="front-sensor-package">Front Sensor Package</h2>

<p>Four cameras are included in the front bumper to complete the car’s 360-degree vision system and provide both active and passive night vision to the driver.</p>

<h3 id="grill-sensor-package">Grill Sensor Package</h3>

<p>Three cameras are to be included in the car’s grill. Why three? Because I can. Only one of them is truly useful to the car: a fish-eye wide angle mounted at the front-most point of the car’s grill. The second camera to be included is a tighter IR-sensitive camera mounted close to the fisheye that will provide a low-latency medium-magnification feed that can be used in low light. Finally, I will likely include a gimballed low light sensor with 30x optical zoom because I have one laying around and it could be a cool feature to have. This camera may get massacred by rocks and bugs but that’s ok because it was really cheap. It does unfortunately interface through ethernet so the latency will be too great to use it when driving but it could be used by the passenger.</p>

<h3 id="thermal-camera">Thermal Camera</h3>

<p>I decided to repurpose both of the car’s fog lights since I found the fog lights themselves rather useless in practice. I did however nearly hit two deer and figured a good, practical decision might be to include a thermal camera in the front bumper. This sounds nice in practice, but making it happen for cheap was another story. I managed to obtain a handheld FLIR inspection camera for cheap due to a damaged display which was perfect for this application. I then proceeded to dissasemble it and discard of all unnecessary electronics such as its displays, buttons, wireless functionality, and visible spectrum camera/laser. Having narrowed the components down to the image sensor and the PCB required to drive it, I designed a 3D-printed bracket to mate that with the fog light mounting holes in the bumper. 
<img src="/assets/img/brz/thermal_camera_CAD.png" alt="Thermal camera bracket CAD" style="float: right; width:59%; height:80%;" />
I initially wanted to gimbal the camera, but the complexity of doing so when compared to the advantages it provides drove me away from that idea. Instead, I mounted the sensor on a servo-driven bracket to provide pitch control which will help maintain the camera level when going up- or downhill. The bracket off to the right of the picture above is to hold the thermal camera’s PCB.</p>

<p><img src="/assets/img/brz/thermal_camera_1.jpg" alt="Thermal camera front view" style="float: left; width:50%; height:80%;" />
<img src="/assets/img/brz/thermal_camera_2.jpg" alt="Thermal camera side view" style="float: right; width:50%; height:80%;" /></p>

<p>I have not designed the pitch controller yet though its design requirements are set: the computer will interface with my CAN network and use one IMU (mounted to the camera) to determine the angle that the camera should be at to keep itself facing along the horizon. I’m not sure if this will be practical since there are situations where one might want the camera to not be level with the theoretical horizon, but I do not see another way of doing this simply. A possible scenario where the camera shouldn’t be level would be when the vehicle is traveling downhill and approaching an uphill portion and I do not see an easy way to mitigate this besides maybe using computer vision to determine what the most appropriate angle for the camera is.</p>

<p>A final consideration is protecting this camera from rock chips. I will do so by plastic-welding a mosquito net type fabric to the trim piece that goes in front of the thermal camera; this should hopefully prevent any rock chips from damaging the optic.</p>

<h3 id="ir-flood-light">IR Flood Light</h3>

<p>The remaining fog light will be used for a high power IR flood light to provide me with active nightvision and compliment the passive nightvision provided by the thermal camera. I have not chosen a light for this purpose yet or designed any form of mounting hardware for it. Should be light work, I think.</p>

<h2 id="surround-cameras">Surround Cameras</h2>

<p>Two fisheye cameras are included on the sides of the car, one in each wing mirror, to provide complete coverage of each side of the car. I initially wanted to remake the entire mirror trim such that it could have dedicated mounting points for a camera. I began by 3D-scanning the existing trim pieces but quickly ran into a myriad of road blocks seeing as working with 3D-scan data is a rather painful process. Solidworks would only let me insert 20’000 (?) polygons in a 3D model which was far too few to truly represent the finish of the mirror’s trim and so I swiftly scrapped this approach.</p>

<p><img src="/assets/img/brz/surround_camera_3D_scan_2.jpg" alt="Mirror trim 3D scan 1" style="float: left; width:50%; height:80%;" />
<img src="/assets/img/brz/surround_camera_3D_scan_1.jpg" alt="Mirror trim 3D scan 2" style="float: right; width:50%; height:80%;" /></p>

<p>In the end, these cameras were mounted using a 3D-printed bracket that piggy backs off of some existing screws within the factory mirror mount and position the camera such that its optic rests flush with the factory mirror trim. I lined up the image sensors through eye-balling and trial and error. I got an idea of how far down the optic should be and how far out it should be from the existing screws in the mirror mount and worked backwards from there. In order to get the lens through the mirror trim, I used a soldering iron to cut through the plastic and then sanded the edges to get them as smoothly as possible. The passenger-side mirror came out a little rough but the drivers side looks pretty swell.</p>

<p><img src="/assets/img/brz/surround_camera_bracket_CAD.png" alt="Surround camera bracket CAD" style="float: left; width:50%; height:80%;" />
<img src="/assets/img/brz/surround_camera_no_trim.png" alt="Surround camera bracket real" style="float: right; width:50%; height:80%;" />
<img src="/assets/img/brz/surround_camera_final.jpg" alt="Surround camera final" /></p>

<p>A similar thing was done for the rear view mirror though this time the bracket replaces a trunk release (?) button. I’m not sure if it was a trunk release button because I did not think BRZs had trunk releases but it definitely looked like a button when I took it out. Regardless, pictures of the CAD and the final product are included below alongside a snapshot of what the camera sees taken by my laptop once the install was complete. I elected to use a 210-degree camera in the back because the 136-degree cameras were not wide enough to capture the pavement and the cars behind me simoultaneously. This choice has the added benefit of allowing me to see on either side of a parking spot before backing out.</p>

<p><img src="/assets/img/brz/rear_camera_CAD.png" alt="Rear camera CAD" style="float: left; width:49%; height:80%;" />
<img src="/assets/img/brz/rear_camera_final.jpg" alt="Rear camera for real" style="float: right; width:49%; height:80%;" /></p>

<p><img src="/assets/img/brz/rear_camera_view.jpg" alt="Rear camera view" /></p>

<p>The camera mount consists of two parts. The first holds the camera and connects it to the trunk trim piece. It does so thanks to an extrusion that protrudes through the rectangular cutout of the trunk release button and a flange that limits how much it can protrude throught he cutout. The second part of the rear view camera mount is a rectangular extrusion that is much wider than the cutout of the trunk release and effectively acts as a clamp to secure the camera in place.</p>

<h2 id="nvidia-jetson-install-in-progress">nVidia Jetson Install [in progress]</h2>

<p>The nVidia Jetson that interfaces with the surround cameras and those within the front sensor package is installed inside the dashboard of the car, next to the airbag module. 
<img src="/assets/img/brz/siren_speaker.jpg" alt="Siren loudspeaker" style="float: right; width:50%; height:80%;" />
I currently made a very quick bracket that solely mounts the Jetson and my <a href="http://ludicroustech.ca/brz-custom-hardware/#wake-on-can-switch">custom CAN switch PCB</a> and I will update it in the future to also hosue an amplifier for the loudspeaker installed on the front of the car. I decided to use the Jetson for driving the front speaker since I didn’t want to mess with multiple independent audio streams coming from the Khadas VIM4 in the head unit, and having the speaker tied to the Jetson allows it to be used for auditory warnings in sentry mode without needing to involve additional hardware.</p>

<p>The Jetson bracket installs to a pair of existing holes in a metal bracket within the dashboard. These wholes were intended to hold wires going to various components of the dashboard and only one of them was used from factory.</p>]]></content><author><name>Serban Popovici</name></author><summary type="html"><![CDATA[General Overview]]></summary></entry><entry><title type="html">Modernizing my 2013 Subaru BRZ</title><link href="http://localhost:4000/brz/" rel="alternate" type="text/html" title="Modernizing my 2013 Subaru BRZ" /><published>2022-10-01T00:00:00-04:00</published><updated>2022-10-01T00:00:00-04:00</updated><id>http://localhost:4000/brz</id><content type="html" xml:base="http://localhost:4000/brz/"><![CDATA[<h1 id="update">UPDATE</h1>
<p>This page is very much under construction, with the nice weather finally here I have begun work on the car and certain things will change/be populated as I get to them. I apologize for the organizational mess that is this page.</p>

<p>GitHub: <a href="https://github.com/Serpopovici163/BRZ">https://github.com/Serpopovici163/BRZ</a></p>

<p>I recently acquired a car for recreational purposes since I had saved up a decent amount of money and didn’t feel like investing it. 
<img src="/assets/img/brz/damn.jpg" alt="Hot damn" style="float: right; width:50%; height:80%;" />
I purchased a BRZ because they are built in conjunction with Toyota and this should theoretically imply that they are reliable and won’t need much mechanical maintenance. Furthermore, the BRZ’s interior is driver-centered while maintaining a relatively simple geometry that should facilitate the design of custom dash components to fit my upgraded electronics.</p>

<p>This project began as a way to disguise speed enforcement countermeasures within the car’s UI seeing as radar/lidar countermeasures are illegal in Ontario. As such, I figured that the best way to hide illegal features would be to program the UI entirely. Seeing as the current head unit is only capable of playing Bluetooth audio, it’s very unlikely that anything I do will result in less overall functionality so I see no downside to this project.</p>

<p>A lot of work has gone into the project so I have split up this post to include a variety of sub-pages discussing individual subsystems in greater detail. This page serves to provide a general overview of the project and a set of links to sub-pages is included below. I’d recommend to read this page first to have an idea of what my goals are before diving into specific sub-systems.</p>
<ul>
  <li><a href="/brz-head-unit">Head Unit [ COMPLETED ]</a></li>
  <li><a href="/brz-steering-wheel">Steering Wheel [ COMPLETED ]</a></li>
  <li><a href="/brz-light-link">Lighting System [ IN PROGRESS ]</a></li>
  <li><a href="/brz-custom-hardware">Custom Hardware [ COMPLETED ]</a></li>
  <li><a href="/brz-vision-system">Vision System [ IN PROGRESS ]</a></li>
  <li><a href="/brz-wiring">Wiring</a></li>
  <li><a href="/brz-user-interface">User Interface (Software)</a></li>
  <li><a href="/brz-gallery">Gallery</a></li>
</ul>

<h1 id="idea">Idea</h1>

<h2 id="ui-enhancements">UI Enhancements</h2>

<p><img src="/assets/img/brz/planned_display_layout.jpg" alt="Picture of plan" style="float: right; width:50%; height:80%; margin-left: 10px;" /></p>

<p>The plan is to replace the head unit of the BRZ with a <a href="https://www.aliexpress.com/item/1005004988939115.html">12.7” touch-screen</a>, replace the small button cluster on the center console with a <a href="https://www.aliexpress.com/item/4000393713339.html">7” touch screen</a>, and convert the analog gauge cluster to a display. The 12.7” display will be used for most vehicle functionality such as navigation and media whereas the 7” display will provide diagnostic information about the vehicle as well as any subsystems I add.</p>

<p>This has been completed (minus digitizing the gauge cluster); the picture below is from a debugging session with a friend of mine.
<img src="/assets/img/brz/finalized_display_layout.jpg" alt="Picture of actual layout" /></p>

<h2 id="convenience-upgrades">Convenience Upgrades</h2>

<p>The car will have an LTE modem in it to provide WiFi connectivity for passengers and allow its internal computers to access Google Maps, media streaming services, and other resources such as the Waze database to protect against police encounters. Additionally, I hope to add cameras all around the car and experiment with computer vision though, aside from collision warnings and enhanced cruise control I’m not sure what I’ll be able to add. The cameras will provide a 360-degree dash cam and I will be able to use them for a Tesla-like sentry mode when the car is locked. Furthermore, it may be interesting to experiment with augmented reality headsets in the future to provide the driver with enhanced situational awareness, but this is not in the works as of this writing.</p>

<p>In order to improve the driver’s situational awareness, I’ve elected to replace the two fog lights of the car with thermal and low light high zoom cameras, respectively. The thermal camera will provide the driver with warnings about heat signatures detected ahead whereas the low light camera does not serve much of a practical purpose and was included because I had it laying around. Finally, I’m hoping to integrate blind spot detection radars and cruise control radars out of scrapped vehicles to provide additional peace of mind when merging lanes.</p>

<h2 id="speed-enforcement-countermeasures">Speed Enforcement Countermeasures</h2>

<p>I’m hoping to, at the very least, add passive sensors for radar/lidar and aircraft but I may not be able to add active countermeasures such as radar/lidar jamming. Based on some brief research, there is a significant risk that a radar/lidar device would detect my jamming attempts seeing as many of them have jamming detection built in. Proper commercial jammers are designed to identify the specific make/model of a lidar gun and behave accordingly however they are rather cost-prohibitive so I may not be able to reasonably source a commercial system.</p>

<p>Aircraft countermeasures are more achievable since aircraft speed detection works using lines painted on the pavement at a known distance interval such that an aircraft flying above can time a vehicle crossing a set of these lines. My plan for countering this is to use a front facing camera on the car to pick up the lines at which point an onboard computer will use a software defined radio to look for any aircraft transponders within a certain radius of the vehicle. Should there be an aircraft nearby, the onboard computer will begin calling out speeds for the user to match in hopes that the average speed across the two lines does not exceed the posted limit.</p>

<p>An even more complex countermeasure I’m hoping to integrate is cellular sniffing where a computer would once again use a software defined radio to look for nearby cellular devices and fingerprint them to single out the specific make and model of cellular modem present in a Ford Interceptor. I’m unsure if this is even theoretically possible since newer cellular devices may encrypt everything including metadata but I intend to research this in depth.</p>

<p>In addition to passive countermeasures and radar/lidar jammers, the vehicle will hopefully have cellular and VHF/UHF jammers. The purpose of these is to prevent a Ford Interceptor’s cellular modem and radio from working when in close proximity to the BRZ meaning that the officer will <em>hopefully</em> be unable to run driver’s licenses or issue tickets.</p>

<h1 id="build">Build</h1>

<h2 id="functional-diagram">Functional Diagram</h2>

<p><img src="/assets/img/brz/functional_diagram.png" alt="BRZ Functional Diagram" /></p>

<p>The diagram above displays the overall hierarchy of devices integrated in the car. Red boxes are video capture devices, green boxes are computers, blue boxes are displays, and purple devices are CAN bus devices. I have elected to create a second CAN bus for my devices and use the “Transceiver node” to forward relevant CAN bus data from the car to my private bus. This is to prevent the risk of conflicting IDs and eliminate the possibility of damaging the vehicle should any of my custom devices malfunction and, for example, short circuit the CAN bus lines. A brief description of each device alongside its functionality is included in the section below.</p>

<h2 id="hardware">Hardware</h2>

<h3 id="computers">Computers</h3>

<p>The UI of the car is handled by two primary computers (a Raspberry Pi 4B and a <a href="https://www.khadas.com/vim4">Khadas VIM4</a>) whereas the hardware modifications are handled by a variety of other Arduinos integrated throughout the vehicle. All the computers denoted by green boxes in the diagram above connect through ethernet and have internet access.</p>

<p>The “Android computer” is a Raspberry Pi 4B running Android that controls the head unit and center console displays which function in tandem to deliver the interactive component of the vehicle’s UI whereas the VIM4 runs Linux and does most of the heavy lifting. The Android computer does not handle any logic and interacts with the VIM4 using a series of web services. The VIM4 handles a variety of tasks including Bluetooth media playback, camera feed management, and CANBUS communication. More information can be found <a href="/brz-VIM4">here</a>.</p>

<p>The “Vision computer” is currently a nVidia Jetson Nano, however I hope to upgrade to the Orin Nano when I have more money to throw at this project. Finally, the SDR computer has not been set in stone at the moment but any modestly powerful SBC will be adequate as its sole purpose is to interact with a few RTL-SDR modules to listen for ADS-B, cellular, and possibly audio communications over radio.</p>

<h3 id="secondary-can-bus">Secondary CAN Bus</h3>

<p>Most of the hardware modifications are executed by Arduinos integrated throughout the vehicle that share a CAN bus. The list of integrated Arduinos as well as other CAN bus devices is as follows:</p>

<ul>
  <li>Blind spot radars –&gt; Will use some second hand eBay or junkyard radars from another car.</li>
  <li>Steering wheel button manager (NANO) –&gt; Converts steering wheel button presses into CAN messages for head unit.</li>
  <li>Center console button manager (NANO) –&gt; Controls MOSFETs that simulate button presses to maintain functionality of old center console buttons which were removed to make way for the 7” diagnostic display.</li>
  <li>Front-facing radar –&gt; Will use a second hand eBay or junkyard radar from another car.</li>
  <li>Ceiling switches –&gt; The car will include a streamdeck-based ceiling switch panel such that the switch labels can change dynamically.</li>
  <li>Mirror manager (NANO) –&gt; Keeps track of mirror position and allows them to automatically tilt down when backing up. One per mirror.</li>
  <li>Low light camera controller –&gt; Translates CAN messages into PWM signals to actuate the camera’s gimbal.</li>
  <li>Thermal camera controller –&gt; Translates CAN messages into a PWM pitch value to adjust the camera’s pitch.</li>
  <li>LightLink (2xMEGA_EMBED) –&gt; Used to control most exterior vehicle lights, more info <a href="/brz-custom-hardware">here</a>.</li>
  <li>Rear defence controller –&gt; In charge of managing jammers in the rear of the vehicle.</li>
  <li>Uniden R7 –&gt; Reverse engineered CAN interface for the Uniden R7 system. I wanted an R9 but those are incredibly expensive.</li>
  <li>Transceiver node –&gt; Forwards CAN data from vehicle’s CAN bus to my CAN bus. More info <a href="/brz-CAN">here</a>.</li>
</ul>

<h3 id="cameras">Cameras</h3>

<p>The planned camera layout is included below. The green semicircles are <a href="https://www.aliexpress.com/item/1005004337827464.html">136-degree FOV cameras</a> installed in the front windshield and above the rear license plate whereas the gray circles represent <a href="https://www.aliexpress.com/item/1005004335144138.html">210-degree cameras</a> (the listing says 180 degrees but they are actually 210) installed beneath the side view mirrors of the car. I planned on including a second front-facing camera on the right wing mirror to provide the driver with insight about any vehicles in the right lane ahead of the car however this camera is not included at this time since the 210-degree FOV camera installed beneath the mirror should theoretically capture all vehicles in the right lane. More information <a href="/brz-vision-system">here</a></p>

<p><img src="/assets/img/brz/camera_layout.png" alt="Camera layout" /></p>

<p>Beyond the cameras used for 360 degree coverage, both fog lights of the vehicle contain camera modules with the driver side being a thermal camera and the passenger side being a Sony Starvis low light camera with optical zoom. These are meant to be used in conjunction with AI to detect threats on the road ahead as well as to provide increased visibility in low light conditions. Of these two, the thermal camera uses a RCA to HDMI adapter to interface with the Khadas VIM4’s HDMI input and the low light camera simply outputs to ethernet and shares the vehicle’s ethernet network. A final camera is installed inside the vehicle and acts as an internal dash cam.</p>

<h2 id="software">Software</h2>

<p>I initially intended to build a custom image of Android Automotive for the BRZ and develop mobile applications that would mostly run as background services and overlay themselves on top of Android to display relevant information. Unfortunately this turned out to be a rather lucrative task so I elected to build a simple Android application running on a mobile image. This also turned out to be an issue due to the odd nature of my head unit’s display arrangement so I have finally settled on running a Linux backend and developing the infotainment software to run on top of Linux.</p>]]></content><author><name>Serban Popovici</name></author><summary type="html"><![CDATA[UPDATE This page is very much under construction, with the nice weather finally here I have begun work on the car and certain things will change/be populated as I get to them. I apologize for the organizational mess that is this page.]]></summary></entry></feed>